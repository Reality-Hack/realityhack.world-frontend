/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  Application,
  ApplicationRequest,
  ApplicationsListParams,
  Attendee,
  AttendeeList,
  AttendeePatch,
  AttendeePreference,
  AttendeePreferenceRequest,
  AttendeeRSVP,
  AttendeeRSVPCreate,
  AttendeeRSVPCreateRequest,
  AttendeeRSVPRequest,
  AttendeeRequest,
  AttendeepreferencesListParams,
  AttendeesListParams,
  DestinyTeam,
  DestinyTeamAttendeeVibe,
  DestinyTeamAttendeeVibeRequest,
  DestinyTeamUpdate,
  DestinyTeamUpdateRequest,
  DestinyteamattendeevibesListParams,
  DestinyteamsListParams,
  DiscordUsernameRole,
  FileUpload,
  FileUploadRequest,
  GroupDetail,
  GroupDetailRequest,
  GroupsListParams,
  HardwareCount,
  HardwareCountDetail,
  HardwareCreate,
  HardwareCreateRequest,
  HardwareDevice,
  HardwareDeviceDetail,
  HardwareDeviceHistory,
  HardwareDeviceHistoryRequest,
  HardwareDeviceRequest,
  HardwareListParams,
  HardwareRequest,
  HardwareRequestCreate,
  HardwareRequestCreateRequest,
  HardwareRequestDetail,
  HardwareRequestList,
  HardwareRequestListRequest,
  HardwaredevicehistoryListParams,
  HardwaredevicesListParams,
  HardwarerequestsListParams,
  LightHouse,
  LightHouseRequest,
  Location,
  LocationRequest,
  LocationsListParams,
  MentorHelpRequest,
  MentorHelpRequestHistory,
  MentorHelpRequestHistoryRequest,
  MentorHelpRequestRead,
  MentorHelpRequestRequest,
  MentorhelprequestsListParams,
  MentorhelprequestshistoryListParams,
  PatchedApplicationRequest,
  PatchedAttendeePatchRequest,
  PatchedAttendeePreferenceRequest,
  PatchedAttendeeRSVPRequest,
  PatchedDestinyTeamAttendeeVibeRequest,
  PatchedDestinyTeamUpdateRequest,
  PatchedFileUploadRequest,
  PatchedGroupDetailRequest,
  PatchedHardwareCreateRequest,
  PatchedHardwareDeviceHistoryRequest,
  PatchedHardwareDeviceRequest,
  PatchedHardwareRequestRequest,
  PatchedLocationRequest,
  PatchedMentorHelpRequestHistoryRequest,
  PatchedMentorHelpRequestRequest,
  PatchedProjectRequest,
  PatchedSkillProficiencyCreateRequest,
  PatchedSkillRequest,
  PatchedTableRequest,
  PatchedTeamUpdateRequest,
  PatchedWorkshopAttendeeRequest,
  PatchedWorkshopRequest,
  Project,
  ProjectRequest,
  ProjectsListParams,
  RsvpsListParams,
  Skill,
  SkillProficiency,
  SkillProficiencyCreate,
  SkillProficiencyCreateRequest,
  SkillProficiencyDetail,
  SkillProficiencyRequest,
  SkillRequest,
  SkillproficienciesListParams,
  SkillsListParams,
  Table,
  TableCreate,
  TableCreateRequest,
  TableRequest,
  TablesListParams,
  Team,
  TeamCreate,
  TeamCreateRequest,
  TeamDetail,
  TeamRequest,
  TeamUpdate,
  TeamsListParams,
  TokenObtainPair,
  TokenObtainPairRequest,
  TokenRefresh,
  TokenRefreshRequest,
  TokenVerifyRequest,
  UploadedFilesListParams,
  Workshop,
  WorkshopAttendee,
  WorkshopAttendeeRequest,
  WorkshopRequest,
  WorkshopattendeesListParams,
  WorkshopsListParams
} from './models';

import { customAxios } from '../lib/custom-axios';
import type { ErrorType , BodyType } from '../lib/custom-axios';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsList = (
    params?: ApplicationsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Application[]>(
    {url: `/applications/`, method: 'GET',
        params
    },
    options);
  }



export const getApplicationsListKey = (params?: ApplicationsListParams,) => [`/applications/`, ...(params ? [params]: [])] as const;

export type ApplicationsListQueryResult = NonNullable<Awaited<ReturnType<typeof applicationsList>>>
export type ApplicationsListQueryError = ErrorType<unknown>

export const useApplicationsList = <TError = ErrorType<unknown>>(
  params?: ApplicationsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof applicationsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getApplicationsListKey(params) : null);
  const swrFn = () => applicationsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsCreate = (
    applicationRequest: BodyType<ApplicationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Application>(
    {url: `/applications/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationRequest
    },
    options);
  }



export const getApplicationsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: ApplicationRequest }): Promise<Application> => {
    return applicationsCreate(arg, options);
  }
}
export const getApplicationsCreateMutationKey = () => [`/applications/`] as const;

export type ApplicationsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof applicationsCreate>>>
export type ApplicationsCreateMutationError = ErrorType<unknown>

export const useApplicationsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof applicationsCreate>>, TError, Key, ApplicationRequest, Awaited<ReturnType<typeof applicationsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getApplicationsCreateMutationKey();
  const swrFn = getApplicationsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Application>(
    {url: `/applications/${id}/`, method: 'GET'
    },
    options);
  }



export const getApplicationsRetrieveKey = (id: string,) => [`/applications/${id}/`] as const;

export type ApplicationsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof applicationsRetrieve>>>
export type ApplicationsRetrieveQueryError = ErrorType<unknown>

export const useApplicationsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof applicationsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getApplicationsRetrieveKey(id) : null);
  const swrFn = () => applicationsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsUpdate = (
    id: string,
    applicationRequest: BodyType<ApplicationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Application>(
    {url: `/applications/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: applicationRequest
    },
    options);
  }



export const getApplicationsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: ApplicationRequest }): Promise<Application> => {
    return applicationsUpdate(id, arg, options);
  }
}
export const getApplicationsUpdateMutationKey = (id: string,) => [`/applications/${id}/`] as const;

export type ApplicationsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof applicationsUpdate>>>
export type ApplicationsUpdateMutationError = ErrorType<unknown>

export const useApplicationsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof applicationsUpdate>>, TError, Key, ApplicationRequest, Awaited<ReturnType<typeof applicationsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getApplicationsUpdateMutationKey(id);
  const swrFn = getApplicationsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsPartialUpdate = (
    id: string,
    patchedApplicationRequest: BodyType<PatchedApplicationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Application>(
    {url: `/applications/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedApplicationRequest
    },
    options);
  }



export const getApplicationsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedApplicationRequest }): Promise<Application> => {
    return applicationsPartialUpdate(id, arg, options);
  }
}
export const getApplicationsPartialUpdateMutationKey = (id: string,) => [`/applications/${id}/`] as const;

export type ApplicationsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof applicationsPartialUpdate>>>
export type ApplicationsPartialUpdateMutationError = ErrorType<unknown>

export const useApplicationsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof applicationsPartialUpdate>>, TError, Key, PatchedApplicationRequest, Awaited<ReturnType<typeof applicationsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getApplicationsPartialUpdateMutationKey(id);
  const swrFn = getApplicationsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows applications to be viewed or edited.
 */
export const applicationsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/applications/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getApplicationsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return applicationsDestroy(id, options);
  }
}
export const getApplicationsDestroyMutationKey = (id: string,) => [`/applications/${id}/`] as const;

export type ApplicationsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof applicationsDestroy>>>
export type ApplicationsDestroyMutationError = ErrorType<unknown>

export const useApplicationsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof applicationsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof applicationsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getApplicationsDestroyMutationKey(id);
  const swrFn = getApplicationsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesList = (
    params?: AttendeepreferencesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePreference[]>(
    {url: `/attendeepreferences/`, method: 'GET',
        params
    },
    options);
  }



export const getAttendeepreferencesListKey = (params?: AttendeepreferencesListParams,) => [`/attendeepreferences/`, ...(params ? [params]: [])] as const;

export type AttendeepreferencesListQueryResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesList>>>
export type AttendeepreferencesListQueryError = ErrorType<unknown>

export const useAttendeepreferencesList = <TError = ErrorType<unknown>>(
  params?: AttendeepreferencesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof attendeepreferencesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAttendeepreferencesListKey(params) : null);
  const swrFn = () => attendeepreferencesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesCreate = (
    attendeePreferenceRequest: BodyType<AttendeePreferenceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePreference>(
    {url: `/attendeepreferences/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attendeePreferenceRequest
    },
    options);
  }



export const getAttendeepreferencesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeePreferenceRequest }): Promise<AttendeePreference> => {
    return attendeepreferencesCreate(arg, options);
  }
}
export const getAttendeepreferencesCreateMutationKey = () => [`/attendeepreferences/`] as const;

export type AttendeepreferencesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesCreate>>>
export type AttendeepreferencesCreateMutationError = ErrorType<unknown>

export const useAttendeepreferencesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeepreferencesCreate>>, TError, Key, AttendeePreferenceRequest, Awaited<ReturnType<typeof attendeepreferencesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeepreferencesCreateMutationKey();
  const swrFn = getAttendeepreferencesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePreference>(
    {url: `/attendeepreferences/${id}/`, method: 'GET'
    },
    options);
  }



export const getAttendeepreferencesRetrieveKey = (id: string,) => [`/attendeepreferences/${id}/`] as const;

export type AttendeepreferencesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesRetrieve>>>
export type AttendeepreferencesRetrieveQueryError = ErrorType<unknown>

export const useAttendeepreferencesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof attendeepreferencesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAttendeepreferencesRetrieveKey(id) : null);
  const swrFn = () => attendeepreferencesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesUpdate = (
    id: string,
    attendeePreferenceRequest: BodyType<AttendeePreferenceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePreference>(
    {url: `/attendeepreferences/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: attendeePreferenceRequest
    },
    options);
  }



export const getAttendeepreferencesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeePreferenceRequest }): Promise<AttendeePreference> => {
    return attendeepreferencesUpdate(id, arg, options);
  }
}
export const getAttendeepreferencesUpdateMutationKey = (id: string,) => [`/attendeepreferences/${id}/`] as const;

export type AttendeepreferencesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesUpdate>>>
export type AttendeepreferencesUpdateMutationError = ErrorType<unknown>

export const useAttendeepreferencesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeepreferencesUpdate>>, TError, Key, AttendeePreferenceRequest, Awaited<ReturnType<typeof attendeepreferencesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeepreferencesUpdateMutationKey(id);
  const swrFn = getAttendeepreferencesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesPartialUpdate = (
    id: string,
    patchedAttendeePreferenceRequest: BodyType<PatchedAttendeePreferenceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePreference>(
    {url: `/attendeepreferences/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAttendeePreferenceRequest
    },
    options);
  }



export const getAttendeepreferencesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedAttendeePreferenceRequest }): Promise<AttendeePreference> => {
    return attendeepreferencesPartialUpdate(id, arg, options);
  }
}
export const getAttendeepreferencesPartialUpdateMutationKey = (id: string,) => [`/attendeepreferences/${id}/`] as const;

export type AttendeepreferencesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesPartialUpdate>>>
export type AttendeepreferencesPartialUpdateMutationError = ErrorType<unknown>

export const useAttendeepreferencesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeepreferencesPartialUpdate>>, TError, Key, PatchedAttendeePreferenceRequest, Awaited<ReturnType<typeof attendeepreferencesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeepreferencesPartialUpdateMutationKey(id);
  const swrFn = getAttendeepreferencesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export const attendeepreferencesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/attendeepreferences/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getAttendeepreferencesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return attendeepreferencesDestroy(id, options);
  }
}
export const getAttendeepreferencesDestroyMutationKey = (id: string,) => [`/attendeepreferences/${id}/`] as const;

export type AttendeepreferencesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof attendeepreferencesDestroy>>>
export type AttendeepreferencesDestroyMutationError = ErrorType<unknown>

export const useAttendeepreferencesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeepreferencesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof attendeepreferencesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeepreferencesDestroyMutationKey(id);
  const swrFn = getAttendeepreferencesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesList = (
    params?: AttendeesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeList[]>(
    {url: `/attendees/`, method: 'GET',
        params
    },
    options);
  }



export const getAttendeesListKey = (params?: AttendeesListParams,) => [`/attendees/`, ...(params ? [params]: [])] as const;

export type AttendeesListQueryResult = NonNullable<Awaited<ReturnType<typeof attendeesList>>>
export type AttendeesListQueryError = ErrorType<unknown>

export const useAttendeesList = <TError = ErrorType<unknown>>(
  params?: AttendeesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof attendeesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAttendeesListKey(params) : null);
  const swrFn = () => attendeesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesCreate = (
    attendeeRequest: BodyType<AttendeeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Attendee>(
    {url: `/attendees/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attendeeRequest
    },
    options);
  }



export const getAttendeesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeeRequest }): Promise<Attendee> => {
    return attendeesCreate(arg, options);
  }
}
export const getAttendeesCreateMutationKey = () => [`/attendees/`] as const;

export type AttendeesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeesCreate>>>
export type AttendeesCreateMutationError = ErrorType<unknown>

export const useAttendeesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeesCreate>>, TError, Key, AttendeeRequest, Awaited<ReturnType<typeof attendeesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeesCreateMutationKey();
  const swrFn = getAttendeesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Attendee>(
    {url: `/attendees/${id}/`, method: 'GET'
    },
    options);
  }



export const getAttendeesRetrieveKey = (id: string,) => [`/attendees/${id}/`] as const;

export type AttendeesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof attendeesRetrieve>>>
export type AttendeesRetrieveQueryError = ErrorType<unknown>

export const useAttendeesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof attendeesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAttendeesRetrieveKey(id) : null);
  const swrFn = () => attendeesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesUpdate = (
    id: string,
    attendeeRequest: BodyType<AttendeeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Attendee>(
    {url: `/attendees/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: attendeeRequest
    },
    options);
  }



export const getAttendeesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeeRequest }): Promise<Attendee> => {
    return attendeesUpdate(id, arg, options);
  }
}
export const getAttendeesUpdateMutationKey = (id: string,) => [`/attendees/${id}/`] as const;

export type AttendeesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeesUpdate>>>
export type AttendeesUpdateMutationError = ErrorType<unknown>

export const useAttendeesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeesUpdate>>, TError, Key, AttendeeRequest, Awaited<ReturnType<typeof attendeesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeesUpdateMutationKey(id);
  const swrFn = getAttendeesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesPartialUpdate = (
    id: string,
    patchedAttendeePatchRequest: BodyType<PatchedAttendeePatchRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeePatch>(
    {url: `/attendees/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAttendeePatchRequest
    },
    options);
  }



export const getAttendeesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedAttendeePatchRequest }): Promise<AttendeePatch> => {
    return attendeesPartialUpdate(id, arg, options);
  }
}
export const getAttendeesPartialUpdateMutationKey = (id: string,) => [`/attendees/${id}/`] as const;

export type AttendeesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof attendeesPartialUpdate>>>
export type AttendeesPartialUpdateMutationError = ErrorType<unknown>

export const useAttendeesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeesPartialUpdate>>, TError, Key, PatchedAttendeePatchRequest, Awaited<ReturnType<typeof attendeesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeesPartialUpdateMutationKey(id);
  const swrFn = getAttendeesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const attendeesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/attendees/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getAttendeesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return attendeesDestroy(id, options);
  }
}
export const getAttendeesDestroyMutationKey = (id: string,) => [`/attendees/${id}/`] as const;

export type AttendeesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof attendeesDestroy>>>
export type AttendeesDestroyMutationError = ErrorType<unknown>

export const useAttendeesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof attendeesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof attendeesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAttendeesDestroyMutationKey(id);
  const swrFn = getAttendeesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const authTokenCreate = (
    tokenObtainPairRequest: BodyType<TokenObtainPairRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TokenObtainPair>(
    {url: `/auth/token/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPairRequest
    },
    options);
  }



export const getAuthTokenCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TokenObtainPairRequest }): Promise<TokenObtainPair> => {
    return authTokenCreate(arg, options);
  }
}
export const getAuthTokenCreateMutationKey = () => [`/auth/token/`] as const;

export type AuthTokenCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authTokenCreate>>>
export type AuthTokenCreateMutationError = ErrorType<unknown>

export const useAuthTokenCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authTokenCreate>>, TError, Key, TokenObtainPairRequest, Awaited<ReturnType<typeof authTokenCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthTokenCreateMutationKey();
  const swrFn = getAuthTokenCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const authTokenRefreshCreate = (
    tokenRefreshRequest: BodyType<TokenRefreshRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TokenRefresh>(
    {url: `/auth/token/refresh/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefreshRequest
    },
    options);
  }



export const getAuthTokenRefreshCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TokenRefreshRequest }): Promise<TokenRefresh> => {
    return authTokenRefreshCreate(arg, options);
  }
}
export const getAuthTokenRefreshCreateMutationKey = () => [`/auth/token/refresh/`] as const;

export type AuthTokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authTokenRefreshCreate>>>
export type AuthTokenRefreshCreateMutationError = ErrorType<unknown>

export const useAuthTokenRefreshCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authTokenRefreshCreate>>, TError, Key, TokenRefreshRequest, Awaited<ReturnType<typeof authTokenRefreshCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthTokenRefreshCreateMutationKey();
  const swrFn = getAuthTokenRefreshCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Takes a token and indicates if it is valid.  This view provides no
information about a token's fitness for a particular use.
 */
export const authTokenVerifyCreate = (
    tokenVerifyRequest: BodyType<TokenVerifyRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/auth/token/verify/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenVerifyRequest
    },
    options);
  }



export const getAuthTokenVerifyCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TokenVerifyRequest }): Promise<void> => {
    return authTokenVerifyCreate(arg, options);
  }
}
export const getAuthTokenVerifyCreateMutationKey = () => [`/auth/token/verify/`] as const;

export type AuthTokenVerifyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof authTokenVerifyCreate>>>
export type AuthTokenVerifyCreateMutationError = ErrorType<unknown>

export const useAuthTokenVerifyCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authTokenVerifyCreate>>, TError, Key, TokenVerifyRequest, Awaited<ReturnType<typeof authTokenVerifyCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthTokenVerifyCreateMutationKey();
  const swrFn = getAuthTokenVerifyCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesList = (
    params?: DestinyteamattendeevibesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamAttendeeVibe[]>(
    {url: `/destinyteamattendeevibes/`, method: 'GET',
        params
    },
    options);
  }



export const getDestinyteamattendeevibesListKey = (params?: DestinyteamattendeevibesListParams,) => [`/destinyteamattendeevibes/`, ...(params ? [params]: [])] as const;

export type DestinyteamattendeevibesListQueryResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesList>>>
export type DestinyteamattendeevibesListQueryError = ErrorType<unknown>

export const useDestinyteamattendeevibesList = <TError = ErrorType<unknown>>(
  params?: DestinyteamattendeevibesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDestinyteamattendeevibesListKey(params) : null);
  const swrFn = () => destinyteamattendeevibesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesCreate = (
    destinyTeamAttendeeVibeRequest: BodyType<DestinyTeamAttendeeVibeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamAttendeeVibe>(
    {url: `/destinyteamattendeevibes/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: destinyTeamAttendeeVibeRequest
    },
    options);
  }



export const getDestinyteamattendeevibesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: DestinyTeamAttendeeVibeRequest }): Promise<DestinyTeamAttendeeVibe> => {
    return destinyteamattendeevibesCreate(arg, options);
  }
}
export const getDestinyteamattendeevibesCreateMutationKey = () => [`/destinyteamattendeevibes/`] as const;

export type DestinyteamattendeevibesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesCreate>>>
export type DestinyteamattendeevibesCreateMutationError = ErrorType<unknown>

export const useDestinyteamattendeevibesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesCreate>>, TError, Key, DestinyTeamAttendeeVibeRequest, Awaited<ReturnType<typeof destinyteamattendeevibesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamattendeevibesCreateMutationKey();
  const swrFn = getDestinyteamattendeevibesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamAttendeeVibe>(
    {url: `/destinyteamattendeevibes/${id}/`, method: 'GET'
    },
    options);
  }



export const getDestinyteamattendeevibesRetrieveKey = (id: string,) => [`/destinyteamattendeevibes/${id}/`] as const;

export type DestinyteamattendeevibesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesRetrieve>>>
export type DestinyteamattendeevibesRetrieveQueryError = ErrorType<unknown>

export const useDestinyteamattendeevibesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDestinyteamattendeevibesRetrieveKey(id) : null);
  const swrFn = () => destinyteamattendeevibesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesUpdate = (
    id: string,
    destinyTeamAttendeeVibeRequest: BodyType<DestinyTeamAttendeeVibeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamAttendeeVibe>(
    {url: `/destinyteamattendeevibes/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: destinyTeamAttendeeVibeRequest
    },
    options);
  }



export const getDestinyteamattendeevibesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: DestinyTeamAttendeeVibeRequest }): Promise<DestinyTeamAttendeeVibe> => {
    return destinyteamattendeevibesUpdate(id, arg, options);
  }
}
export const getDestinyteamattendeevibesUpdateMutationKey = (id: string,) => [`/destinyteamattendeevibes/${id}/`] as const;

export type DestinyteamattendeevibesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesUpdate>>>
export type DestinyteamattendeevibesUpdateMutationError = ErrorType<unknown>

export const useDestinyteamattendeevibesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesUpdate>>, TError, Key, DestinyTeamAttendeeVibeRequest, Awaited<ReturnType<typeof destinyteamattendeevibesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamattendeevibesUpdateMutationKey(id);
  const swrFn = getDestinyteamattendeevibesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesPartialUpdate = (
    id: string,
    patchedDestinyTeamAttendeeVibeRequest: BodyType<PatchedDestinyTeamAttendeeVibeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamAttendeeVibe>(
    {url: `/destinyteamattendeevibes/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedDestinyTeamAttendeeVibeRequest
    },
    options);
  }



export const getDestinyteamattendeevibesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedDestinyTeamAttendeeVibeRequest }): Promise<DestinyTeamAttendeeVibe> => {
    return destinyteamattendeevibesPartialUpdate(id, arg, options);
  }
}
export const getDestinyteamattendeevibesPartialUpdateMutationKey = (id: string,) => [`/destinyteamattendeevibes/${id}/`] as const;

export type DestinyteamattendeevibesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesPartialUpdate>>>
export type DestinyteamattendeevibesPartialUpdateMutationError = ErrorType<unknown>

export const useDestinyteamattendeevibesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesPartialUpdate>>, TError, Key, PatchedDestinyTeamAttendeeVibeRequest, Awaited<ReturnType<typeof destinyteamattendeevibesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamattendeevibesPartialUpdateMutationKey(id);
  const swrFn = getDestinyteamattendeevibesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export const destinyteamattendeevibesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/destinyteamattendeevibes/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getDestinyteamattendeevibesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return destinyteamattendeevibesDestroy(id, options);
  }
}
export const getDestinyteamattendeevibesDestroyMutationKey = (id: string,) => [`/destinyteamattendeevibes/${id}/`] as const;

export type DestinyteamattendeevibesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamattendeevibesDestroy>>>
export type DestinyteamattendeevibesDestroyMutationError = ErrorType<unknown>

export const useDestinyteamattendeevibesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamattendeevibesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof destinyteamattendeevibesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamattendeevibesDestroyMutationKey(id);
  const swrFn = getDestinyteamattendeevibesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsList = (
    params?: DestinyteamsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeam[]>(
    {url: `/destinyteams/`, method: 'GET',
        params
    },
    options);
  }



export const getDestinyteamsListKey = (params?: DestinyteamsListParams,) => [`/destinyteams/`, ...(params ? [params]: [])] as const;

export type DestinyteamsListQueryResult = NonNullable<Awaited<ReturnType<typeof destinyteamsList>>>
export type DestinyteamsListQueryError = ErrorType<unknown>

export const useDestinyteamsList = <TError = ErrorType<unknown>>(
  params?: DestinyteamsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof destinyteamsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDestinyteamsListKey(params) : null);
  const swrFn = () => destinyteamsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsCreate = (
    destinyTeamUpdateRequest: BodyType<DestinyTeamUpdateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamUpdate>(
    {url: `/destinyteams/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: destinyTeamUpdateRequest
    },
    options);
  }



export const getDestinyteamsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: DestinyTeamUpdateRequest }): Promise<DestinyTeamUpdate> => {
    return destinyteamsCreate(arg, options);
  }
}
export const getDestinyteamsCreateMutationKey = () => [`/destinyteams/`] as const;

export type DestinyteamsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamsCreate>>>
export type DestinyteamsCreateMutationError = ErrorType<unknown>

export const useDestinyteamsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamsCreate>>, TError, Key, DestinyTeamUpdateRequest, Awaited<ReturnType<typeof destinyteamsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamsCreateMutationKey();
  const swrFn = getDestinyteamsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeam>(
    {url: `/destinyteams/${id}/`, method: 'GET'
    },
    options);
  }



export const getDestinyteamsRetrieveKey = (id: string,) => [`/destinyteams/${id}/`] as const;

export type DestinyteamsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof destinyteamsRetrieve>>>
export type DestinyteamsRetrieveQueryError = ErrorType<unknown>

export const useDestinyteamsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof destinyteamsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDestinyteamsRetrieveKey(id) : null);
  const swrFn = () => destinyteamsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsUpdate = (
    id: string,
    destinyTeamUpdateRequest: BodyType<DestinyTeamUpdateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamUpdate>(
    {url: `/destinyteams/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: destinyTeamUpdateRequest
    },
    options);
  }



export const getDestinyteamsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: DestinyTeamUpdateRequest }): Promise<DestinyTeamUpdate> => {
    return destinyteamsUpdate(id, arg, options);
  }
}
export const getDestinyteamsUpdateMutationKey = (id: string,) => [`/destinyteams/${id}/`] as const;

export type DestinyteamsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamsUpdate>>>
export type DestinyteamsUpdateMutationError = ErrorType<unknown>

export const useDestinyteamsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamsUpdate>>, TError, Key, DestinyTeamUpdateRequest, Awaited<ReturnType<typeof destinyteamsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamsUpdateMutationKey(id);
  const swrFn = getDestinyteamsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsPartialUpdate = (
    id: string,
    patchedDestinyTeamUpdateRequest: BodyType<PatchedDestinyTeamUpdateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DestinyTeamUpdate>(
    {url: `/destinyteams/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedDestinyTeamUpdateRequest
    },
    options);
  }



export const getDestinyteamsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedDestinyTeamUpdateRequest }): Promise<DestinyTeamUpdate> => {
    return destinyteamsPartialUpdate(id, arg, options);
  }
}
export const getDestinyteamsPartialUpdateMutationKey = (id: string,) => [`/destinyteams/${id}/`] as const;

export type DestinyteamsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamsPartialUpdate>>>
export type DestinyteamsPartialUpdateMutationError = ErrorType<unknown>

export const useDestinyteamsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamsPartialUpdate>>, TError, Key, PatchedDestinyTeamUpdateRequest, Awaited<ReturnType<typeof destinyteamsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamsPartialUpdateMutationKey(id);
  const swrFn = getDestinyteamsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export const destinyteamsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/destinyteams/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getDestinyteamsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return destinyteamsDestroy(id, options);
  }
}
export const getDestinyteamsDestroyMutationKey = (id: string,) => [`/destinyteams/${id}/`] as const;

export type DestinyteamsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof destinyteamsDestroy>>>
export type DestinyteamsDestroyMutationError = ErrorType<unknown>

export const useDestinyteamsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof destinyteamsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof destinyteamsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDestinyteamsDestroyMutationKey(id);
  const swrFn = getDestinyteamsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API Endpoint that allows for Discord information to be viewed or edited.
 */
export const discordList = (
    
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<DiscordUsernameRole[]>(
    {url: `/discord/`, method: 'GET'
    },
    options);
  }



export const getDiscordListKey = () => [`/discord/`] as const;

export type DiscordListQueryResult = NonNullable<Awaited<ReturnType<typeof discordList>>>
export type DiscordListQueryError = ErrorType<unknown>

export const useDiscordList = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof discordList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDiscordListKey() : null);
  const swrFn = () => discordList(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API Endpoint that allows for Discord information to be viewed or edited.
 */
export const discordDestroy = (
    attendeeCommunicationsPlatformUsername: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/discord/${attendeeCommunicationsPlatformUsername}/`, method: 'DELETE'
    },
    options);
  }



export const getDiscordDestroyMutationFetcher = (attendeeCommunicationsPlatformUsername: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return discordDestroy(attendeeCommunicationsPlatformUsername, options);
  }
}
export const getDiscordDestroyMutationKey = (attendeeCommunicationsPlatformUsername: string,) => [`/discord/${attendeeCommunicationsPlatformUsername}/`] as const;

export type DiscordDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof discordDestroy>>>
export type DiscordDestroyMutationError = ErrorType<unknown>

export const useDiscordDestroy = <TError = ErrorType<unknown>>(
  attendeeCommunicationsPlatformUsername: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof discordDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof discordDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDiscordDestroyMutationKey(attendeeCommunicationsPlatformUsername);
  const swrFn = getDiscordDestroyMutationFetcher(attendeeCommunicationsPlatformUsername, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsList = (
    params?: GroupsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<GroupDetail[]>(
    {url: `/groups/`, method: 'GET',
        params
    },
    options);
  }



export const getGroupsListKey = (params?: GroupsListParams,) => [`/groups/`, ...(params ? [params]: [])] as const;

export type GroupsListQueryResult = NonNullable<Awaited<ReturnType<typeof groupsList>>>
export type GroupsListQueryError = ErrorType<unknown>

export const useGroupsList = <TError = ErrorType<unknown>>(
  params?: GroupsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof groupsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGroupsListKey(params) : null);
  const swrFn = () => groupsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsCreate = (
    groupDetailRequest: BodyType<GroupDetailRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<GroupDetail>(
    {url: `/groups/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupDetailRequest
    },
    options);
  }



export const getGroupsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: GroupDetailRequest }): Promise<GroupDetail> => {
    return groupsCreate(arg, options);
  }
}
export const getGroupsCreateMutationKey = () => [`/groups/`] as const;

export type GroupsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof groupsCreate>>>
export type GroupsCreateMutationError = ErrorType<unknown>

export const useGroupsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof groupsCreate>>, TError, Key, GroupDetailRequest, Awaited<ReturnType<typeof groupsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getGroupsCreateMutationKey();
  const swrFn = getGroupsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsRetrieve = (
    id: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<GroupDetail>(
    {url: `/groups/${id}/`, method: 'GET'
    },
    options);
  }



export const getGroupsRetrieveKey = (id: number,) => [`/groups/${id}/`] as const;

export type GroupsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof groupsRetrieve>>>
export type GroupsRetrieveQueryError = ErrorType<unknown>

export const useGroupsRetrieve = <TError = ErrorType<unknown>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof groupsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGroupsRetrieveKey(id) : null);
  const swrFn = () => groupsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsUpdate = (
    id: number,
    groupDetailRequest: BodyType<GroupDetailRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<GroupDetail>(
    {url: `/groups/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: groupDetailRequest
    },
    options);
  }



export const getGroupsUpdateMutationFetcher = (id: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: GroupDetailRequest }): Promise<GroupDetail> => {
    return groupsUpdate(id, arg, options);
  }
}
export const getGroupsUpdateMutationKey = (id: number,) => [`/groups/${id}/`] as const;

export type GroupsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof groupsUpdate>>>
export type GroupsUpdateMutationError = ErrorType<unknown>

export const useGroupsUpdate = <TError = ErrorType<unknown>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof groupsUpdate>>, TError, Key, GroupDetailRequest, Awaited<ReturnType<typeof groupsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getGroupsUpdateMutationKey(id);
  const swrFn = getGroupsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsPartialUpdate = (
    id: number,
    patchedGroupDetailRequest: BodyType<PatchedGroupDetailRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<GroupDetail>(
    {url: `/groups/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedGroupDetailRequest
    },
    options);
  }



export const getGroupsPartialUpdateMutationFetcher = (id: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedGroupDetailRequest }): Promise<GroupDetail> => {
    return groupsPartialUpdate(id, arg, options);
  }
}
export const getGroupsPartialUpdateMutationKey = (id: number,) => [`/groups/${id}/`] as const;

export type GroupsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof groupsPartialUpdate>>>
export type GroupsPartialUpdateMutationError = ErrorType<unknown>

export const useGroupsPartialUpdate = <TError = ErrorType<unknown>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof groupsPartialUpdate>>, TError, Key, PatchedGroupDetailRequest, Awaited<ReturnType<typeof groupsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getGroupsPartialUpdateMutationKey(id);
  const swrFn = getGroupsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows groups to be viewed or edited.
 */
export const groupsDestroy = (
    id: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/groups/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getGroupsDestroyMutationFetcher = (id: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return groupsDestroy(id, options);
  }
}
export const getGroupsDestroyMutationKey = (id: number,) => [`/groups/${id}/`] as const;

export type GroupsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof groupsDestroy>>>
export type GroupsDestroyMutationError = ErrorType<unknown>

export const useGroupsDestroy = <TError = ErrorType<unknown>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof groupsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof groupsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getGroupsDestroyMutationKey(id);
  const swrFn = getGroupsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwareList = (
    params?: HardwareListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareCount[]>(
    {url: `/hardware/`, method: 'GET',
        params
    },
    options);
  }



export const getHardwareListKey = (params?: HardwareListParams,) => [`/hardware/`, ...(params ? [params]: [])] as const;

export type HardwareListQueryResult = NonNullable<Awaited<ReturnType<typeof hardwareList>>>
export type HardwareListQueryError = ErrorType<unknown>

export const useHardwareList = <TError = ErrorType<unknown>>(
  params?: HardwareListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwareList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwareListKey(params) : null);
  const swrFn = () => hardwareList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwareCreate = (
    hardwareCreateRequest: BodyType<HardwareCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareCreate>(
    {url: `/hardware/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hardwareCreateRequest
    },
    options);
  }



export const getHardwareCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareCreateRequest }): Promise<HardwareCreate> => {
    return hardwareCreate(arg, options);
  }
}
export const getHardwareCreateMutationKey = () => [`/hardware/`] as const;

export type HardwareCreateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwareCreate>>>
export type HardwareCreateMutationError = ErrorType<unknown>

export const useHardwareCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwareCreate>>, TError, Key, HardwareCreateRequest, Awaited<ReturnType<typeof hardwareCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwareCreateMutationKey();
  const swrFn = getHardwareCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwareRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareCountDetail>(
    {url: `/hardware/${id}/`, method: 'GET'
    },
    options);
  }



export const getHardwareRetrieveKey = (id: string,) => [`/hardware/${id}/`] as const;

export type HardwareRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof hardwareRetrieve>>>
export type HardwareRetrieveQueryError = ErrorType<unknown>

export const useHardwareRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwareRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwareRetrieveKey(id) : null);
  const swrFn = () => hardwareRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwareUpdate = (
    id: string,
    hardwareCreateRequest: BodyType<HardwareCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareCreate>(
    {url: `/hardware/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hardwareCreateRequest
    },
    options);
  }



export const getHardwareUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareCreateRequest }): Promise<HardwareCreate> => {
    return hardwareUpdate(id, arg, options);
  }
}
export const getHardwareUpdateMutationKey = (id: string,) => [`/hardware/${id}/`] as const;

export type HardwareUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwareUpdate>>>
export type HardwareUpdateMutationError = ErrorType<unknown>

export const useHardwareUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwareUpdate>>, TError, Key, HardwareCreateRequest, Awaited<ReturnType<typeof hardwareUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwareUpdateMutationKey(id);
  const swrFn = getHardwareUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwarePartialUpdate = (
    id: string,
    patchedHardwareCreateRequest: BodyType<PatchedHardwareCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareCreate>(
    {url: `/hardware/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedHardwareCreateRequest
    },
    options);
  }



export const getHardwarePartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedHardwareCreateRequest }): Promise<HardwareCreate> => {
    return hardwarePartialUpdate(id, arg, options);
  }
}
export const getHardwarePartialUpdateMutationKey = (id: string,) => [`/hardware/${id}/`] as const;

export type HardwarePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwarePartialUpdate>>>
export type HardwarePartialUpdateMutationError = ErrorType<unknown>

export const useHardwarePartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwarePartialUpdate>>, TError, Key, PatchedHardwareCreateRequest, Awaited<ReturnType<typeof hardwarePartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwarePartialUpdateMutationKey(id);
  const swrFn = getHardwarePartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware types to be viewed or edited.
 */
export const hardwareDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/hardware/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getHardwareDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return hardwareDestroy(id, options);
  }
}
export const getHardwareDestroyMutationKey = (id: string,) => [`/hardware/${id}/`] as const;

export type HardwareDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof hardwareDestroy>>>
export type HardwareDestroyMutationError = ErrorType<unknown>

export const useHardwareDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwareDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof hardwareDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwareDestroyMutationKey(id);
  const swrFn = getHardwareDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryList = (
    params?: HardwaredevicehistoryListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceHistory[]>(
    {url: `/hardwaredevicehistory/`, method: 'GET',
        params
    },
    options);
  }



export const getHardwaredevicehistoryListKey = (params?: HardwaredevicehistoryListParams,) => [`/hardwaredevicehistory/`, ...(params ? [params]: [])] as const;

export type HardwaredevicehistoryListQueryResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryList>>>
export type HardwaredevicehistoryListQueryError = ErrorType<unknown>

export const useHardwaredevicehistoryList = <TError = ErrorType<unknown>>(
  params?: HardwaredevicehistoryListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwaredevicehistoryListKey(params) : null);
  const swrFn = () => hardwaredevicehistoryList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryCreate = (
    hardwareDeviceHistoryRequest: BodyType<HardwareDeviceHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceHistory>(
    {url: `/hardwaredevicehistory/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hardwareDeviceHistoryRequest
    },
    options);
  }



export const getHardwaredevicehistoryCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareDeviceHistoryRequest }): Promise<HardwareDeviceHistory> => {
    return hardwaredevicehistoryCreate(arg, options);
  }
}
export const getHardwaredevicehistoryCreateMutationKey = () => [`/hardwaredevicehistory/`] as const;

export type HardwaredevicehistoryCreateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryCreate>>>
export type HardwaredevicehistoryCreateMutationError = ErrorType<unknown>

export const useHardwaredevicehistoryCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryCreate>>, TError, Key, HardwareDeviceHistoryRequest, Awaited<ReturnType<typeof hardwaredevicehistoryCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicehistoryCreateMutationKey();
  const swrFn = getHardwaredevicehistoryCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryRetrieve = (
    historyId: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceHistory>(
    {url: `/hardwaredevicehistory/${historyId}/`, method: 'GET'
    },
    options);
  }



export const getHardwaredevicehistoryRetrieveKey = (historyId: number,) => [`/hardwaredevicehistory/${historyId}/`] as const;

export type HardwaredevicehistoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryRetrieve>>>
export type HardwaredevicehistoryRetrieveQueryError = ErrorType<unknown>

export const useHardwaredevicehistoryRetrieve = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(historyId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwaredevicehistoryRetrieveKey(historyId) : null);
  const swrFn = () => hardwaredevicehistoryRetrieve(historyId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryUpdate = (
    historyId: number,
    hardwareDeviceHistoryRequest: BodyType<HardwareDeviceHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceHistory>(
    {url: `/hardwaredevicehistory/${historyId}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hardwareDeviceHistoryRequest
    },
    options);
  }



export const getHardwaredevicehistoryUpdateMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareDeviceHistoryRequest }): Promise<HardwareDeviceHistory> => {
    return hardwaredevicehistoryUpdate(historyId, arg, options);
  }
}
export const getHardwaredevicehistoryUpdateMutationKey = (historyId: number,) => [`/hardwaredevicehistory/${historyId}/`] as const;

export type HardwaredevicehistoryUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryUpdate>>>
export type HardwaredevicehistoryUpdateMutationError = ErrorType<unknown>

export const useHardwaredevicehistoryUpdate = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryUpdate>>, TError, Key, HardwareDeviceHistoryRequest, Awaited<ReturnType<typeof hardwaredevicehistoryUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicehistoryUpdateMutationKey(historyId);
  const swrFn = getHardwaredevicehistoryUpdateMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryPartialUpdate = (
    historyId: number,
    patchedHardwareDeviceHistoryRequest: BodyType<PatchedHardwareDeviceHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceHistory>(
    {url: `/hardwaredevicehistory/${historyId}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedHardwareDeviceHistoryRequest
    },
    options);
  }



export const getHardwaredevicehistoryPartialUpdateMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedHardwareDeviceHistoryRequest }): Promise<HardwareDeviceHistory> => {
    return hardwaredevicehistoryPartialUpdate(historyId, arg, options);
  }
}
export const getHardwaredevicehistoryPartialUpdateMutationKey = (historyId: number,) => [`/hardwaredevicehistory/${historyId}/`] as const;

export type HardwaredevicehistoryPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryPartialUpdate>>>
export type HardwaredevicehistoryPartialUpdateMutationError = ErrorType<unknown>

export const useHardwaredevicehistoryPartialUpdate = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryPartialUpdate>>, TError, Key, PatchedHardwareDeviceHistoryRequest, Awaited<ReturnType<typeof hardwaredevicehistoryPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicehistoryPartialUpdateMutationKey(historyId);
  const swrFn = getHardwaredevicehistoryPartialUpdateMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export const hardwaredevicehistoryDestroy = (
    historyId: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/hardwaredevicehistory/${historyId}/`, method: 'DELETE'
    },
    options);
  }



export const getHardwaredevicehistoryDestroyMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return hardwaredevicehistoryDestroy(historyId, options);
  }
}
export const getHardwaredevicehistoryDestroyMutationKey = (historyId: number,) => [`/hardwaredevicehistory/${historyId}/`] as const;

export type HardwaredevicehistoryDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicehistoryDestroy>>>
export type HardwaredevicehistoryDestroyMutationError = ErrorType<unknown>

export const useHardwaredevicehistoryDestroy = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicehistoryDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof hardwaredevicehistoryDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicehistoryDestroyMutationKey(historyId);
  const swrFn = getHardwaredevicehistoryDestroyMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesList = (
    params?: HardwaredevicesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDevice[]>(
    {url: `/hardwaredevices/`, method: 'GET',
        params
    },
    options);
  }



export const getHardwaredevicesListKey = (params?: HardwaredevicesListParams,) => [`/hardwaredevices/`, ...(params ? [params]: [])] as const;

export type HardwaredevicesListQueryResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesList>>>
export type HardwaredevicesListQueryError = ErrorType<unknown>

export const useHardwaredevicesList = <TError = ErrorType<unknown>>(
  params?: HardwaredevicesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwaredevicesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwaredevicesListKey(params) : null);
  const swrFn = () => hardwaredevicesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesCreate = (
    hardwareDeviceRequest: BodyType<HardwareDeviceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDevice>(
    {url: `/hardwaredevices/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hardwareDeviceRequest
    },
    options);
  }



export const getHardwaredevicesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareDeviceRequest }): Promise<HardwareDevice> => {
    return hardwaredevicesCreate(arg, options);
  }
}
export const getHardwaredevicesCreateMutationKey = () => [`/hardwaredevices/`] as const;

export type HardwaredevicesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesCreate>>>
export type HardwaredevicesCreateMutationError = ErrorType<unknown>

export const useHardwaredevicesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicesCreate>>, TError, Key, HardwareDeviceRequest, Awaited<ReturnType<typeof hardwaredevicesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicesCreateMutationKey();
  const swrFn = getHardwaredevicesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDeviceDetail>(
    {url: `/hardwaredevices/${id}/`, method: 'GET'
    },
    options);
  }



export const getHardwaredevicesRetrieveKey = (id: string,) => [`/hardwaredevices/${id}/`] as const;

export type HardwaredevicesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesRetrieve>>>
export type HardwaredevicesRetrieveQueryError = ErrorType<unknown>

export const useHardwaredevicesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwaredevicesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwaredevicesRetrieveKey(id) : null);
  const swrFn = () => hardwaredevicesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesUpdate = (
    id: string,
    hardwareDeviceRequest: BodyType<HardwareDeviceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDevice>(
    {url: `/hardwaredevices/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hardwareDeviceRequest
    },
    options);
  }



export const getHardwaredevicesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareDeviceRequest }): Promise<HardwareDevice> => {
    return hardwaredevicesUpdate(id, arg, options);
  }
}
export const getHardwaredevicesUpdateMutationKey = (id: string,) => [`/hardwaredevices/${id}/`] as const;

export type HardwaredevicesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesUpdate>>>
export type HardwaredevicesUpdateMutationError = ErrorType<unknown>

export const useHardwaredevicesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicesUpdate>>, TError, Key, HardwareDeviceRequest, Awaited<ReturnType<typeof hardwaredevicesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicesUpdateMutationKey(id);
  const swrFn = getHardwaredevicesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesPartialUpdate = (
    id: string,
    patchedHardwareDeviceRequest: BodyType<PatchedHardwareDeviceRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareDevice>(
    {url: `/hardwaredevices/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedHardwareDeviceRequest
    },
    options);
  }



export const getHardwaredevicesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedHardwareDeviceRequest }): Promise<HardwareDevice> => {
    return hardwaredevicesPartialUpdate(id, arg, options);
  }
}
export const getHardwaredevicesPartialUpdateMutationKey = (id: string,) => [`/hardwaredevices/${id}/`] as const;

export type HardwaredevicesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesPartialUpdate>>>
export type HardwaredevicesPartialUpdateMutationError = ErrorType<unknown>

export const useHardwaredevicesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicesPartialUpdate>>, TError, Key, PatchedHardwareDeviceRequest, Awaited<ReturnType<typeof hardwaredevicesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicesPartialUpdateMutationKey(id);
  const swrFn = getHardwaredevicesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows individual hardware devices to be viewed or edited.
 */
export const hardwaredevicesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/hardwaredevices/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getHardwaredevicesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return hardwaredevicesDestroy(id, options);
  }
}
export const getHardwaredevicesDestroyMutationKey = (id: string,) => [`/hardwaredevices/${id}/`] as const;

export type HardwaredevicesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof hardwaredevicesDestroy>>>
export type HardwaredevicesDestroyMutationError = ErrorType<unknown>

export const useHardwaredevicesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwaredevicesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof hardwaredevicesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwaredevicesDestroyMutationKey(id);
  const swrFn = getHardwaredevicesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsList = (
    params?: HardwarerequestsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareRequestList[]>(
    {url: `/hardwarerequests/`, method: 'GET',
        params
    },
    options);
  }



export const getHardwarerequestsListKey = (params?: HardwarerequestsListParams,) => [`/hardwarerequests/`, ...(params ? [params]: [])] as const;

export type HardwarerequestsListQueryResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsList>>>
export type HardwarerequestsListQueryError = ErrorType<unknown>

export const useHardwarerequestsList = <TError = ErrorType<unknown>>(
  params?: HardwarerequestsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwarerequestsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwarerequestsListKey(params) : null);
  const swrFn = () => hardwarerequestsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsCreate = (
    hardwareRequestCreateRequest: BodyType<HardwareRequestCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareRequestCreate>(
    {url: `/hardwarerequests/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hardwareRequestCreateRequest
    },
    options);
  }



export const getHardwarerequestsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareRequestCreateRequest }): Promise<HardwareRequestCreate> => {
    return hardwarerequestsCreate(arg, options);
  }
}
export const getHardwarerequestsCreateMutationKey = () => [`/hardwarerequests/`] as const;

export type HardwarerequestsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsCreate>>>
export type HardwarerequestsCreateMutationError = ErrorType<unknown>

export const useHardwarerequestsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwarerequestsCreate>>, TError, Key, HardwareRequestCreateRequest, Awaited<ReturnType<typeof hardwarerequestsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwarerequestsCreateMutationKey();
  const swrFn = getHardwarerequestsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareRequestDetail>(
    {url: `/hardwarerequests/${id}/`, method: 'GET'
    },
    options);
  }



export const getHardwarerequestsRetrieveKey = (id: string,) => [`/hardwarerequests/${id}/`] as const;

export type HardwarerequestsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsRetrieve>>>
export type HardwarerequestsRetrieveQueryError = ErrorType<unknown>

export const useHardwarerequestsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof hardwarerequestsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHardwarerequestsRetrieveKey(id) : null);
  const swrFn = () => hardwarerequestsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsUpdate = (
    id: string,
    hardwareRequestListRequest: BodyType<HardwareRequestListRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareRequestList>(
    {url: `/hardwarerequests/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hardwareRequestListRequest
    },
    options);
  }



export const getHardwarerequestsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: HardwareRequestListRequest }): Promise<HardwareRequestList> => {
    return hardwarerequestsUpdate(id, arg, options);
  }
}
export const getHardwarerequestsUpdateMutationKey = (id: string,) => [`/hardwarerequests/${id}/`] as const;

export type HardwarerequestsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsUpdate>>>
export type HardwarerequestsUpdateMutationError = ErrorType<unknown>

export const useHardwarerequestsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwarerequestsUpdate>>, TError, Key, HardwareRequestListRequest, Awaited<ReturnType<typeof hardwarerequestsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwarerequestsUpdateMutationKey(id);
  const swrFn = getHardwarerequestsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsPartialUpdate = (
    id: string,
    patchedHardwareRequestRequest: BodyType<PatchedHardwareRequestRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<HardwareRequest>(
    {url: `/hardwarerequests/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedHardwareRequestRequest
    },
    options);
  }



export const getHardwarerequestsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedHardwareRequestRequest }): Promise<HardwareRequest> => {
    return hardwarerequestsPartialUpdate(id, arg, options);
  }
}
export const getHardwarerequestsPartialUpdateMutationKey = (id: string,) => [`/hardwarerequests/${id}/`] as const;

export type HardwarerequestsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsPartialUpdate>>>
export type HardwarerequestsPartialUpdateMutationError = ErrorType<unknown>

export const useHardwarerequestsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwarerequestsPartialUpdate>>, TError, Key, PatchedHardwareRequestRequest, Awaited<ReturnType<typeof hardwarerequestsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwarerequestsPartialUpdateMutationKey(id);
  const swrFn = getHardwarerequestsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows hardware device requests from participants to be viewed or edited.
 */
export const hardwarerequestsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/hardwarerequests/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getHardwarerequestsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return hardwarerequestsDestroy(id, options);
  }
}
export const getHardwarerequestsDestroyMutationKey = (id: string,) => [`/hardwarerequests/${id}/`] as const;

export type HardwarerequestsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof hardwarerequestsDestroy>>>
export type HardwarerequestsDestroyMutationError = ErrorType<unknown>

export const useHardwarerequestsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof hardwarerequestsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof hardwarerequestsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getHardwarerequestsDestroyMutationKey(id);
  const swrFn = getHardwarerequestsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Reality Kits to be viewed or edited.
 */
export const lighthousesList = (
    
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<LightHouse[]>(
    {url: `/lighthouses/`, method: 'GET'
    },
    options);
  }



export const getLighthousesListKey = () => [`/lighthouses/`] as const;

export type LighthousesListQueryResult = NonNullable<Awaited<ReturnType<typeof lighthousesList>>>
export type LighthousesListQueryError = ErrorType<unknown>

export const useLighthousesList = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof lighthousesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLighthousesListKey() : null);
  const swrFn = () => lighthousesList(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows Reality Kits to be viewed or edited.
 */
export const lighthousesCreate = (
    lightHouseRequest: BodyType<LightHouseRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<LightHouse>(
    {url: `/lighthouses/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: lightHouseRequest
    },
    options);
  }



export const getLighthousesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: LightHouseRequest }): Promise<LightHouse> => {
    return lighthousesCreate(arg, options);
  }
}
export const getLighthousesCreateMutationKey = () => [`/lighthouses/`] as const;

export type LighthousesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof lighthousesCreate>>>
export type LighthousesCreateMutationError = ErrorType<unknown>

export const useLighthousesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof lighthousesCreate>>, TError, Key, LightHouseRequest, Awaited<ReturnType<typeof lighthousesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLighthousesCreateMutationKey();
  const swrFn = getLighthousesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsList = (
    params?: LocationsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Location[]>(
    {url: `/locations/`, method: 'GET',
        params
    },
    options);
  }



export const getLocationsListKey = (params?: LocationsListParams,) => [`/locations/`, ...(params ? [params]: [])] as const;

export type LocationsListQueryResult = NonNullable<Awaited<ReturnType<typeof locationsList>>>
export type LocationsListQueryError = ErrorType<unknown>

export const useLocationsList = <TError = ErrorType<unknown>>(
  params?: LocationsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof locationsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLocationsListKey(params) : null);
  const swrFn = () => locationsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsCreate = (
    locationRequest: BodyType<LocationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Location>(
    {url: `/locations/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: locationRequest
    },
    options);
  }



export const getLocationsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: LocationRequest }): Promise<Location> => {
    return locationsCreate(arg, options);
  }
}
export const getLocationsCreateMutationKey = () => [`/locations/`] as const;

export type LocationsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof locationsCreate>>>
export type LocationsCreateMutationError = ErrorType<unknown>

export const useLocationsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof locationsCreate>>, TError, Key, LocationRequest, Awaited<ReturnType<typeof locationsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLocationsCreateMutationKey();
  const swrFn = getLocationsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Location>(
    {url: `/locations/${id}/`, method: 'GET'
    },
    options);
  }



export const getLocationsRetrieveKey = (id: string,) => [`/locations/${id}/`] as const;

export type LocationsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof locationsRetrieve>>>
export type LocationsRetrieveQueryError = ErrorType<unknown>

export const useLocationsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof locationsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLocationsRetrieveKey(id) : null);
  const swrFn = () => locationsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsUpdate = (
    id: string,
    locationRequest: BodyType<LocationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Location>(
    {url: `/locations/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: locationRequest
    },
    options);
  }



export const getLocationsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: LocationRequest }): Promise<Location> => {
    return locationsUpdate(id, arg, options);
  }
}
export const getLocationsUpdateMutationKey = (id: string,) => [`/locations/${id}/`] as const;

export type LocationsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof locationsUpdate>>>
export type LocationsUpdateMutationError = ErrorType<unknown>

export const useLocationsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof locationsUpdate>>, TError, Key, LocationRequest, Awaited<ReturnType<typeof locationsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLocationsUpdateMutationKey(id);
  const swrFn = getLocationsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsPartialUpdate = (
    id: string,
    patchedLocationRequest: BodyType<PatchedLocationRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Location>(
    {url: `/locations/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedLocationRequest
    },
    options);
  }



export const getLocationsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedLocationRequest }): Promise<Location> => {
    return locationsPartialUpdate(id, arg, options);
  }
}
export const getLocationsPartialUpdateMutationKey = (id: string,) => [`/locations/${id}/`] as const;

export type LocationsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof locationsPartialUpdate>>>
export type LocationsPartialUpdateMutationError = ErrorType<unknown>

export const useLocationsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof locationsPartialUpdate>>, TError, Key, PatchedLocationRequest, Awaited<ReturnType<typeof locationsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLocationsPartialUpdateMutationKey(id);
  const swrFn = getLocationsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows locations to be viewed or edited.
 */
export const locationsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/locations/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getLocationsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return locationsDestroy(id, options);
  }
}
export const getLocationsDestroyMutationKey = (id: string,) => [`/locations/${id}/`] as const;

export type LocationsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof locationsDestroy>>>
export type LocationsDestroyMutationError = ErrorType<unknown>

export const useLocationsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof locationsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof locationsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLocationsDestroyMutationKey(id);
  const swrFn = getLocationsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint for getting detailed information about an authenticated user.
 */
export const meRetrieve = (
    
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/me/`, method: 'GET'
    },
    options);
  }



export const getMeRetrieveKey = () => [`/me/`] as const;

export type MeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof meRetrieve>>>
export type MeRetrieveQueryError = ErrorType<unknown>

export const useMeRetrieve = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof meRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getMeRetrieveKey() : null);
  const swrFn = () => meRetrieve(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint for getting detailed information about an authenticated user.
 */
export const mePartialUpdate = (
    
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/me/`, method: 'PATCH'
    },
    options);
  }



export const getMePartialUpdateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return mePartialUpdate(options);
  }
}
export const getMePartialUpdateMutationKey = () => [`/me/`] as const;

export type MePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof mePartialUpdate>>>
export type MePartialUpdateMutationError = ErrorType<unknown>

export const useMePartialUpdate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mePartialUpdate>>, TError, Key, Arguments, Awaited<ReturnType<typeof mePartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMePartialUpdateMutationKey();
  const swrFn = getMePartialUpdateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsList = (
    params?: MentorhelprequestsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestRead[]>(
    {url: `/mentorhelprequests/`, method: 'GET',
        params
    },
    options);
  }



export const getMentorhelprequestsListKey = (params?: MentorhelprequestsListParams,) => [`/mentorhelprequests/`, ...(params ? [params]: [])] as const;

export type MentorhelprequestsListQueryResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsList>>>
export type MentorhelprequestsListQueryError = ErrorType<unknown>

export const useMentorhelprequestsList = <TError = ErrorType<unknown>>(
  params?: MentorhelprequestsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof mentorhelprequestsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getMentorhelprequestsListKey(params) : null);
  const swrFn = () => mentorhelprequestsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsCreate = (
    mentorHelpRequestRequest: BodyType<MentorHelpRequestRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequest>(
    {url: `/mentorhelprequests/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mentorHelpRequestRequest
    },
    options);
  }



export const getMentorhelprequestsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: MentorHelpRequestRequest }): Promise<MentorHelpRequest> => {
    return mentorhelprequestsCreate(arg, options);
  }
}
export const getMentorhelprequestsCreateMutationKey = () => [`/mentorhelprequests/`] as const;

export type MentorhelprequestsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsCreate>>>
export type MentorhelprequestsCreateMutationError = ErrorType<unknown>

export const useMentorhelprequestsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestsCreate>>, TError, Key, MentorHelpRequestRequest, Awaited<ReturnType<typeof mentorhelprequestsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestsCreateMutationKey();
  const swrFn = getMentorhelprequestsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequest>(
    {url: `/mentorhelprequests/${id}/`, method: 'GET'
    },
    options);
  }



export const getMentorhelprequestsRetrieveKey = (id: string,) => [`/mentorhelprequests/${id}/`] as const;

export type MentorhelprequestsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsRetrieve>>>
export type MentorhelprequestsRetrieveQueryError = ErrorType<unknown>

export const useMentorhelprequestsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof mentorhelprequestsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getMentorhelprequestsRetrieveKey(id) : null);
  const swrFn = () => mentorhelprequestsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsUpdate = (
    id: string,
    mentorHelpRequestRequest: BodyType<MentorHelpRequestRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequest>(
    {url: `/mentorhelprequests/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mentorHelpRequestRequest
    },
    options);
  }



export const getMentorhelprequestsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: MentorHelpRequestRequest }): Promise<MentorHelpRequest> => {
    return mentorhelprequestsUpdate(id, arg, options);
  }
}
export const getMentorhelprequestsUpdateMutationKey = (id: string,) => [`/mentorhelprequests/${id}/`] as const;

export type MentorhelprequestsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsUpdate>>>
export type MentorhelprequestsUpdateMutationError = ErrorType<unknown>

export const useMentorhelprequestsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestsUpdate>>, TError, Key, MentorHelpRequestRequest, Awaited<ReturnType<typeof mentorhelprequestsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestsUpdateMutationKey(id);
  const swrFn = getMentorhelprequestsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsPartialUpdate = (
    id: string,
    patchedMentorHelpRequestRequest: BodyType<PatchedMentorHelpRequestRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequest>(
    {url: `/mentorhelprequests/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedMentorHelpRequestRequest
    },
    options);
  }



export const getMentorhelprequestsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedMentorHelpRequestRequest }): Promise<MentorHelpRequest> => {
    return mentorhelprequestsPartialUpdate(id, arg, options);
  }
}
export const getMentorhelprequestsPartialUpdateMutationKey = (id: string,) => [`/mentorhelprequests/${id}/`] as const;

export type MentorhelprequestsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsPartialUpdate>>>
export type MentorhelprequestsPartialUpdateMutationError = ErrorType<unknown>

export const useMentorhelprequestsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestsPartialUpdate>>, TError, Key, PatchedMentorHelpRequestRequest, Awaited<ReturnType<typeof mentorhelprequestsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestsPartialUpdateMutationKey(id);
  const swrFn = getMentorhelprequestsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export const mentorhelprequestsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/mentorhelprequests/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getMentorhelprequestsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return mentorhelprequestsDestroy(id, options);
  }
}
export const getMentorhelprequestsDestroyMutationKey = (id: string,) => [`/mentorhelprequests/${id}/`] as const;

export type MentorhelprequestsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestsDestroy>>>
export type MentorhelprequestsDestroyMutationError = ErrorType<unknown>

export const useMentorhelprequestsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof mentorhelprequestsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestsDestroyMutationKey(id);
  const swrFn = getMentorhelprequestsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryList = (
    params?: MentorhelprequestshistoryListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestHistory[]>(
    {url: `/mentorhelprequestshistory/`, method: 'GET',
        params
    },
    options);
  }



export const getMentorhelprequestshistoryListKey = (params?: MentorhelprequestshistoryListParams,) => [`/mentorhelprequestshistory/`, ...(params ? [params]: [])] as const;

export type MentorhelprequestshistoryListQueryResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryList>>>
export type MentorhelprequestshistoryListQueryError = ErrorType<unknown>

export const useMentorhelprequestshistoryList = <TError = ErrorType<unknown>>(
  params?: MentorhelprequestshistoryListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getMentorhelprequestshistoryListKey(params) : null);
  const swrFn = () => mentorhelprequestshistoryList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryCreate = (
    mentorHelpRequestHistoryRequest: BodyType<MentorHelpRequestHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestHistory>(
    {url: `/mentorhelprequestshistory/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mentorHelpRequestHistoryRequest
    },
    options);
  }



export const getMentorhelprequestshistoryCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: MentorHelpRequestHistoryRequest }): Promise<MentorHelpRequestHistory> => {
    return mentorhelprequestshistoryCreate(arg, options);
  }
}
export const getMentorhelprequestshistoryCreateMutationKey = () => [`/mentorhelprequestshistory/`] as const;

export type MentorhelprequestshistoryCreateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryCreate>>>
export type MentorhelprequestshistoryCreateMutationError = ErrorType<unknown>

export const useMentorhelprequestshistoryCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryCreate>>, TError, Key, MentorHelpRequestHistoryRequest, Awaited<ReturnType<typeof mentorhelprequestshistoryCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestshistoryCreateMutationKey();
  const swrFn = getMentorhelprequestshistoryCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryRetrieve = (
    historyId: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestHistory>(
    {url: `/mentorhelprequestshistory/${historyId}/`, method: 'GET'
    },
    options);
  }



export const getMentorhelprequestshistoryRetrieveKey = (historyId: number,) => [`/mentorhelprequestshistory/${historyId}/`] as const;

export type MentorhelprequestshistoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryRetrieve>>>
export type MentorhelprequestshistoryRetrieveQueryError = ErrorType<unknown>

export const useMentorhelprequestshistoryRetrieve = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(historyId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getMentorhelprequestshistoryRetrieveKey(historyId) : null);
  const swrFn = () => mentorhelprequestshistoryRetrieve(historyId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryUpdate = (
    historyId: number,
    mentorHelpRequestHistoryRequest: BodyType<MentorHelpRequestHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestHistory>(
    {url: `/mentorhelprequestshistory/${historyId}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mentorHelpRequestHistoryRequest
    },
    options);
  }



export const getMentorhelprequestshistoryUpdateMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: MentorHelpRequestHistoryRequest }): Promise<MentorHelpRequestHistory> => {
    return mentorhelprequestshistoryUpdate(historyId, arg, options);
  }
}
export const getMentorhelprequestshistoryUpdateMutationKey = (historyId: number,) => [`/mentorhelprequestshistory/${historyId}/`] as const;

export type MentorhelprequestshistoryUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryUpdate>>>
export type MentorhelprequestshistoryUpdateMutationError = ErrorType<unknown>

export const useMentorhelprequestshistoryUpdate = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryUpdate>>, TError, Key, MentorHelpRequestHistoryRequest, Awaited<ReturnType<typeof mentorhelprequestshistoryUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestshistoryUpdateMutationKey(historyId);
  const swrFn = getMentorhelprequestshistoryUpdateMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryPartialUpdate = (
    historyId: number,
    patchedMentorHelpRequestHistoryRequest: BodyType<PatchedMentorHelpRequestHistoryRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<MentorHelpRequestHistory>(
    {url: `/mentorhelprequestshistory/${historyId}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedMentorHelpRequestHistoryRequest
    },
    options);
  }



export const getMentorhelprequestshistoryPartialUpdateMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedMentorHelpRequestHistoryRequest }): Promise<MentorHelpRequestHistory> => {
    return mentorhelprequestshistoryPartialUpdate(historyId, arg, options);
  }
}
export const getMentorhelprequestshistoryPartialUpdateMutationKey = (historyId: number,) => [`/mentorhelprequestshistory/${historyId}/`] as const;

export type MentorhelprequestshistoryPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryPartialUpdate>>>
export type MentorhelprequestshistoryPartialUpdateMutationError = ErrorType<unknown>

export const useMentorhelprequestshistoryPartialUpdate = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryPartialUpdate>>, TError, Key, PatchedMentorHelpRequestHistoryRequest, Awaited<ReturnType<typeof mentorhelprequestshistoryPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestshistoryPartialUpdateMutationKey(historyId);
  const swrFn = getMentorhelprequestshistoryPartialUpdateMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export const mentorhelprequestshistoryDestroy = (
    historyId: number,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/mentorhelprequestshistory/${historyId}/`, method: 'DELETE'
    },
    options);
  }



export const getMentorhelprequestshistoryDestroyMutationFetcher = (historyId: number, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return mentorhelprequestshistoryDestroy(historyId, options);
  }
}
export const getMentorhelprequestshistoryDestroyMutationKey = (historyId: number,) => [`/mentorhelprequestshistory/${historyId}/`] as const;

export type MentorhelprequestshistoryDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof mentorhelprequestshistoryDestroy>>>
export type MentorhelprequestshistoryDestroyMutationError = ErrorType<unknown>

export const useMentorhelprequestshistoryDestroy = <TError = ErrorType<unknown>>(
  historyId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mentorhelprequestshistoryDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof mentorhelprequestshistoryDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMentorhelprequestshistoryDestroyMutationKey(historyId);
  const swrFn = getMentorhelprequestshistoryDestroyMutationFetcher(historyId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsList = (
    params?: ProjectsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Project[]>(
    {url: `/projects/`, method: 'GET',
        params
    },
    options);
  }



export const getProjectsListKey = (params?: ProjectsListParams,) => [`/projects/`, ...(params ? [params]: [])] as const;

export type ProjectsListQueryResult = NonNullable<Awaited<ReturnType<typeof projectsList>>>
export type ProjectsListQueryError = ErrorType<unknown>

export const useProjectsList = <TError = ErrorType<unknown>>(
  params?: ProjectsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof projectsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getProjectsListKey(params) : null);
  const swrFn = () => projectsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsCreate = (
    projectRequest: BodyType<ProjectRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Project>(
    {url: `/projects/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectRequest
    },
    options);
  }



export const getProjectsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: ProjectRequest }): Promise<Project> => {
    return projectsCreate(arg, options);
  }
}
export const getProjectsCreateMutationKey = () => [`/projects/`] as const;

export type ProjectsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof projectsCreate>>>
export type ProjectsCreateMutationError = ErrorType<unknown>

export const useProjectsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof projectsCreate>>, TError, Key, ProjectRequest, Awaited<ReturnType<typeof projectsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getProjectsCreateMutationKey();
  const swrFn = getProjectsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Project>(
    {url: `/projects/${id}/`, method: 'GET'
    },
    options);
  }



export const getProjectsRetrieveKey = (id: string,) => [`/projects/${id}/`] as const;

export type ProjectsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof projectsRetrieve>>>
export type ProjectsRetrieveQueryError = ErrorType<unknown>

export const useProjectsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof projectsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getProjectsRetrieveKey(id) : null);
  const swrFn = () => projectsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsUpdate = (
    id: string,
    projectRequest: BodyType<ProjectRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Project>(
    {url: `/projects/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectRequest
    },
    options);
  }



export const getProjectsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: ProjectRequest }): Promise<Project> => {
    return projectsUpdate(id, arg, options);
  }
}
export const getProjectsUpdateMutationKey = (id: string,) => [`/projects/${id}/`] as const;

export type ProjectsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof projectsUpdate>>>
export type ProjectsUpdateMutationError = ErrorType<unknown>

export const useProjectsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof projectsUpdate>>, TError, Key, ProjectRequest, Awaited<ReturnType<typeof projectsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getProjectsUpdateMutationKey(id);
  const swrFn = getProjectsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsPartialUpdate = (
    id: string,
    patchedProjectRequest: BodyType<PatchedProjectRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Project>(
    {url: `/projects/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProjectRequest
    },
    options);
  }



export const getProjectsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedProjectRequest }): Promise<Project> => {
    return projectsPartialUpdate(id, arg, options);
  }
}
export const getProjectsPartialUpdateMutationKey = (id: string,) => [`/projects/${id}/`] as const;

export type ProjectsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof projectsPartialUpdate>>>
export type ProjectsPartialUpdateMutationError = ErrorType<unknown>

export const useProjectsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof projectsPartialUpdate>>, TError, Key, PatchedProjectRequest, Awaited<ReturnType<typeof projectsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getProjectsPartialUpdateMutationKey(id);
  const swrFn = getProjectsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows projects to be viewed or edited.
 */
export const projectsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/projects/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getProjectsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return projectsDestroy(id, options);
  }
}
export const getProjectsDestroyMutationKey = (id: string,) => [`/projects/${id}/`] as const;

export type ProjectsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof projectsDestroy>>>
export type ProjectsDestroyMutationError = ErrorType<unknown>

export const useProjectsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof projectsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof projectsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getProjectsDestroyMutationKey(id);
  const swrFn = getProjectsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsList = (
    params?: RsvpsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeRSVP[]>(
    {url: `/rsvps/`, method: 'GET',
        params
    },
    options);
  }



export const getRsvpsListKey = (params?: RsvpsListParams,) => [`/rsvps/`, ...(params ? [params]: [])] as const;

export type RsvpsListQueryResult = NonNullable<Awaited<ReturnType<typeof rsvpsList>>>
export type RsvpsListQueryError = ErrorType<unknown>

export const useRsvpsList = <TError = ErrorType<unknown>>(
  params?: RsvpsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof rsvpsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getRsvpsListKey(params) : null);
  const swrFn = () => rsvpsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsCreate = (
    attendeeRSVPCreateRequest: BodyType<AttendeeRSVPCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeRSVPCreate>(
    {url: `/rsvps/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attendeeRSVPCreateRequest
    },
    options);
  }



export const getRsvpsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeeRSVPCreateRequest }): Promise<AttendeeRSVPCreate> => {
    return rsvpsCreate(arg, options);
  }
}
export const getRsvpsCreateMutationKey = () => [`/rsvps/`] as const;

export type RsvpsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof rsvpsCreate>>>
export type RsvpsCreateMutationError = ErrorType<unknown>

export const useRsvpsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof rsvpsCreate>>, TError, Key, AttendeeRSVPCreateRequest, Awaited<ReturnType<typeof rsvpsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRsvpsCreateMutationKey();
  const swrFn = getRsvpsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeRSVP>(
    {url: `/rsvps/${id}/`, method: 'GET'
    },
    options);
  }



export const getRsvpsRetrieveKey = (id: string,) => [`/rsvps/${id}/`] as const;

export type RsvpsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof rsvpsRetrieve>>>
export type RsvpsRetrieveQueryError = ErrorType<unknown>

export const useRsvpsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof rsvpsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getRsvpsRetrieveKey(id) : null);
  const swrFn = () => rsvpsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsUpdate = (
    id: string,
    attendeeRSVPRequest: BodyType<AttendeeRSVPRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeRSVP>(
    {url: `/rsvps/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: attendeeRSVPRequest
    },
    options);
  }



export const getRsvpsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: AttendeeRSVPRequest }): Promise<AttendeeRSVP> => {
    return rsvpsUpdate(id, arg, options);
  }
}
export const getRsvpsUpdateMutationKey = (id: string,) => [`/rsvps/${id}/`] as const;

export type RsvpsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof rsvpsUpdate>>>
export type RsvpsUpdateMutationError = ErrorType<unknown>

export const useRsvpsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof rsvpsUpdate>>, TError, Key, AttendeeRSVPRequest, Awaited<ReturnType<typeof rsvpsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRsvpsUpdateMutationKey(id);
  const swrFn = getRsvpsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsPartialUpdate = (
    id: string,
    patchedAttendeeRSVPRequest: BodyType<PatchedAttendeeRSVPRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<AttendeeRSVP>(
    {url: `/rsvps/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAttendeeRSVPRequest
    },
    options);
  }



export const getRsvpsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedAttendeeRSVPRequest }): Promise<AttendeeRSVP> => {
    return rsvpsPartialUpdate(id, arg, options);
  }
}
export const getRsvpsPartialUpdateMutationKey = (id: string,) => [`/rsvps/${id}/`] as const;

export type RsvpsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof rsvpsPartialUpdate>>>
export type RsvpsPartialUpdateMutationError = ErrorType<unknown>

export const useRsvpsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof rsvpsPartialUpdate>>, TError, Key, PatchedAttendeeRSVPRequest, Awaited<ReturnType<typeof rsvpsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRsvpsPartialUpdateMutationKey(id);
  const swrFn = getRsvpsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows users to be viewed or edited.
 */
export const rsvpsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/rsvps/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getRsvpsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return rsvpsDestroy(id, options);
  }
}
export const getRsvpsDestroyMutationKey = (id: string,) => [`/rsvps/${id}/`] as const;

export type RsvpsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof rsvpsDestroy>>>
export type RsvpsDestroyMutationError = ErrorType<unknown>

export const useRsvpsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof rsvpsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof rsvpsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRsvpsDestroyMutationKey(id);
  const swrFn = getRsvpsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesList = (
    params?: SkillproficienciesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<SkillProficiency[]>(
    {url: `/skillproficiencies/`, method: 'GET',
        params
    },
    options);
  }



export const getSkillproficienciesListKey = (params?: SkillproficienciesListParams,) => [`/skillproficiencies/`, ...(params ? [params]: [])] as const;

export type SkillproficienciesListQueryResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesList>>>
export type SkillproficienciesListQueryError = ErrorType<unknown>

export const useSkillproficienciesList = <TError = ErrorType<unknown>>(
  params?: SkillproficienciesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof skillproficienciesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSkillproficienciesListKey(params) : null);
  const swrFn = () => skillproficienciesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesCreate = (
    skillProficiencyCreateRequest: BodyType<SkillProficiencyCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<SkillProficiencyCreate>(
    {url: `/skillproficiencies/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: skillProficiencyCreateRequest
    },
    options);
  }



export const getSkillproficienciesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: SkillProficiencyCreateRequest }): Promise<SkillProficiencyCreate> => {
    return skillproficienciesCreate(arg, options);
  }
}
export const getSkillproficienciesCreateMutationKey = () => [`/skillproficiencies/`] as const;

export type SkillproficienciesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesCreate>>>
export type SkillproficienciesCreateMutationError = ErrorType<unknown>

export const useSkillproficienciesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillproficienciesCreate>>, TError, Key, SkillProficiencyCreateRequest, Awaited<ReturnType<typeof skillproficienciesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillproficienciesCreateMutationKey();
  const swrFn = getSkillproficienciesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<SkillProficiencyDetail>(
    {url: `/skillproficiencies/${id}/`, method: 'GET'
    },
    options);
  }



export const getSkillproficienciesRetrieveKey = (id: string,) => [`/skillproficiencies/${id}/`] as const;

export type SkillproficienciesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesRetrieve>>>
export type SkillproficienciesRetrieveQueryError = ErrorType<unknown>

export const useSkillproficienciesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof skillproficienciesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSkillproficienciesRetrieveKey(id) : null);
  const swrFn = () => skillproficienciesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesUpdate = (
    id: string,
    skillProficiencyRequest: BodyType<SkillProficiencyRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<SkillProficiency>(
    {url: `/skillproficiencies/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: skillProficiencyRequest
    },
    options);
  }



export const getSkillproficienciesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: SkillProficiencyRequest }): Promise<SkillProficiency> => {
    return skillproficienciesUpdate(id, arg, options);
  }
}
export const getSkillproficienciesUpdateMutationKey = (id: string,) => [`/skillproficiencies/${id}/`] as const;

export type SkillproficienciesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesUpdate>>>
export type SkillproficienciesUpdateMutationError = ErrorType<unknown>

export const useSkillproficienciesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillproficienciesUpdate>>, TError, Key, SkillProficiencyRequest, Awaited<ReturnType<typeof skillproficienciesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillproficienciesUpdateMutationKey(id);
  const swrFn = getSkillproficienciesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesPartialUpdate = (
    id: string,
    patchedSkillProficiencyCreateRequest: BodyType<PatchedSkillProficiencyCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<SkillProficiencyCreate>(
    {url: `/skillproficiencies/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedSkillProficiencyCreateRequest
    },
    options);
  }



export const getSkillproficienciesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedSkillProficiencyCreateRequest }): Promise<SkillProficiencyCreate> => {
    return skillproficienciesPartialUpdate(id, arg, options);
  }
}
export const getSkillproficienciesPartialUpdateMutationKey = (id: string,) => [`/skillproficiencies/${id}/`] as const;

export type SkillproficienciesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesPartialUpdate>>>
export type SkillproficienciesPartialUpdateMutationError = ErrorType<unknown>

export const useSkillproficienciesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillproficienciesPartialUpdate>>, TError, Key, PatchedSkillProficiencyCreateRequest, Awaited<ReturnType<typeof skillproficienciesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillproficienciesPartialUpdateMutationKey(id);
  const swrFn = getSkillproficienciesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export const skillproficienciesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/skillproficiencies/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getSkillproficienciesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return skillproficienciesDestroy(id, options);
  }
}
export const getSkillproficienciesDestroyMutationKey = (id: string,) => [`/skillproficiencies/${id}/`] as const;

export type SkillproficienciesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof skillproficienciesDestroy>>>
export type SkillproficienciesDestroyMutationError = ErrorType<unknown>

export const useSkillproficienciesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillproficienciesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof skillproficienciesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillproficienciesDestroyMutationKey(id);
  const swrFn = getSkillproficienciesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsList = (
    params?: SkillsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Skill[]>(
    {url: `/skills/`, method: 'GET',
        params
    },
    options);
  }



export const getSkillsListKey = (params?: SkillsListParams,) => [`/skills/`, ...(params ? [params]: [])] as const;

export type SkillsListQueryResult = NonNullable<Awaited<ReturnType<typeof skillsList>>>
export type SkillsListQueryError = ErrorType<unknown>

export const useSkillsList = <TError = ErrorType<unknown>>(
  params?: SkillsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof skillsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSkillsListKey(params) : null);
  const swrFn = () => skillsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsCreate = (
    skillRequest: BodyType<SkillRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Skill>(
    {url: `/skills/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: skillRequest
    },
    options);
  }



export const getSkillsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: SkillRequest }): Promise<Skill> => {
    return skillsCreate(arg, options);
  }
}
export const getSkillsCreateMutationKey = () => [`/skills/`] as const;

export type SkillsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof skillsCreate>>>
export type SkillsCreateMutationError = ErrorType<unknown>

export const useSkillsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillsCreate>>, TError, Key, SkillRequest, Awaited<ReturnType<typeof skillsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillsCreateMutationKey();
  const swrFn = getSkillsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Skill>(
    {url: `/skills/${id}/`, method: 'GET'
    },
    options);
  }



export const getSkillsRetrieveKey = (id: string,) => [`/skills/${id}/`] as const;

export type SkillsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof skillsRetrieve>>>
export type SkillsRetrieveQueryError = ErrorType<unknown>

export const useSkillsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof skillsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSkillsRetrieveKey(id) : null);
  const swrFn = () => skillsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsUpdate = (
    id: string,
    skillRequest: BodyType<SkillRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Skill>(
    {url: `/skills/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: skillRequest
    },
    options);
  }



export const getSkillsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: SkillRequest }): Promise<Skill> => {
    return skillsUpdate(id, arg, options);
  }
}
export const getSkillsUpdateMutationKey = (id: string,) => [`/skills/${id}/`] as const;

export type SkillsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof skillsUpdate>>>
export type SkillsUpdateMutationError = ErrorType<unknown>

export const useSkillsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillsUpdate>>, TError, Key, SkillRequest, Awaited<ReturnType<typeof skillsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillsUpdateMutationKey(id);
  const swrFn = getSkillsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsPartialUpdate = (
    id: string,
    patchedSkillRequest: BodyType<PatchedSkillRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Skill>(
    {url: `/skills/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedSkillRequest
    },
    options);
  }



export const getSkillsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedSkillRequest }): Promise<Skill> => {
    return skillsPartialUpdate(id, arg, options);
  }
}
export const getSkillsPartialUpdateMutationKey = (id: string,) => [`/skills/${id}/`] as const;

export type SkillsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof skillsPartialUpdate>>>
export type SkillsPartialUpdateMutationError = ErrorType<unknown>

export const useSkillsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillsPartialUpdate>>, TError, Key, PatchedSkillRequest, Awaited<ReturnType<typeof skillsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillsPartialUpdateMutationKey(id);
  const swrFn = getSkillsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows skills to be viewed or edited.
 */
export const skillsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/skills/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getSkillsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return skillsDestroy(id, options);
  }
}
export const getSkillsDestroyMutationKey = (id: string,) => [`/skills/${id}/`] as const;

export type SkillsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof skillsDestroy>>>
export type SkillsDestroyMutationError = ErrorType<unknown>

export const useSkillsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skillsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof skillsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkillsDestroyMutationKey(id);
  const swrFn = getSkillsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesList = (
    params?: TablesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Table[]>(
    {url: `/tables/`, method: 'GET',
        params
    },
    options);
  }



export const getTablesListKey = (params?: TablesListParams,) => [`/tables/`, ...(params ? [params]: [])] as const;

export type TablesListQueryResult = NonNullable<Awaited<ReturnType<typeof tablesList>>>
export type TablesListQueryError = ErrorType<unknown>

export const useTablesList = <TError = ErrorType<unknown>>(
  params?: TablesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof tablesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTablesListKey(params) : null);
  const swrFn = () => tablesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesCreate = (
    tableCreateRequest: BodyType<TableCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TableCreate>(
    {url: `/tables/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tableCreateRequest
    },
    options);
  }



export const getTablesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TableCreateRequest }): Promise<TableCreate> => {
    return tablesCreate(arg, options);
  }
}
export const getTablesCreateMutationKey = () => [`/tables/`] as const;

export type TablesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tablesCreate>>>
export type TablesCreateMutationError = ErrorType<unknown>

export const useTablesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tablesCreate>>, TError, Key, TableCreateRequest, Awaited<ReturnType<typeof tablesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTablesCreateMutationKey();
  const swrFn = getTablesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Table>(
    {url: `/tables/${id}/`, method: 'GET'
    },
    options);
  }



export const getTablesRetrieveKey = (id: string,) => [`/tables/${id}/`] as const;

export type TablesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tablesRetrieve>>>
export type TablesRetrieveQueryError = ErrorType<unknown>

export const useTablesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof tablesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTablesRetrieveKey(id) : null);
  const swrFn = () => tablesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesUpdate = (
    id: string,
    tableRequest: BodyType<TableRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Table>(
    {url: `/tables/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tableRequest
    },
    options);
  }



export const getTablesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TableRequest }): Promise<Table> => {
    return tablesUpdate(id, arg, options);
  }
}
export const getTablesUpdateMutationKey = (id: string,) => [`/tables/${id}/`] as const;

export type TablesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tablesUpdate>>>
export type TablesUpdateMutationError = ErrorType<unknown>

export const useTablesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tablesUpdate>>, TError, Key, TableRequest, Awaited<ReturnType<typeof tablesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTablesUpdateMutationKey(id);
  const swrFn = getTablesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesPartialUpdate = (
    id: string,
    patchedTableRequest: BodyType<PatchedTableRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Table>(
    {url: `/tables/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedTableRequest
    },
    options);
  }



export const getTablesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedTableRequest }): Promise<Table> => {
    return tablesPartialUpdate(id, arg, options);
  }
}
export const getTablesPartialUpdateMutationKey = (id: string,) => [`/tables/${id}/`] as const;

export type TablesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tablesPartialUpdate>>>
export type TablesPartialUpdateMutationError = ErrorType<unknown>

export const useTablesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tablesPartialUpdate>>, TError, Key, PatchedTableRequest, Awaited<ReturnType<typeof tablesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTablesPartialUpdateMutationKey(id);
  const swrFn = getTablesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows tables to be viewed or edited.
 */
export const tablesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/tables/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getTablesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return tablesDestroy(id, options);
  }
}
export const getTablesDestroyMutationKey = (id: string,) => [`/tables/${id}/`] as const;

export type TablesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof tablesDestroy>>>
export type TablesDestroyMutationError = ErrorType<unknown>

export const useTablesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tablesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof tablesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTablesDestroyMutationKey(id);
  const swrFn = getTablesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsList = (
    params?: TeamsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Team[]>(
    {url: `/teams/`, method: 'GET',
        params
    },
    options);
  }



export const getTeamsListKey = (params?: TeamsListParams,) => [`/teams/`, ...(params ? [params]: [])] as const;

export type TeamsListQueryResult = NonNullable<Awaited<ReturnType<typeof teamsList>>>
export type TeamsListQueryError = ErrorType<unknown>

export const useTeamsList = <TError = ErrorType<unknown>>(
  params?: TeamsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof teamsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTeamsListKey(params) : null);
  const swrFn = () => teamsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsCreate = (
    teamCreateRequest: BodyType<TeamCreateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TeamCreate>(
    {url: `/teams/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: teamCreateRequest
    },
    options);
  }



export const getTeamsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TeamCreateRequest }): Promise<TeamCreate> => {
    return teamsCreate(arg, options);
  }
}
export const getTeamsCreateMutationKey = () => [`/teams/`] as const;

export type TeamsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof teamsCreate>>>
export type TeamsCreateMutationError = ErrorType<unknown>

export const useTeamsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof teamsCreate>>, TError, Key, TeamCreateRequest, Awaited<ReturnType<typeof teamsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTeamsCreateMutationKey();
  const swrFn = getTeamsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TeamDetail>(
    {url: `/teams/${id}/`, method: 'GET'
    },
    options);
  }



export const getTeamsRetrieveKey = (id: string,) => [`/teams/${id}/`] as const;

export type TeamsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof teamsRetrieve>>>
export type TeamsRetrieveQueryError = ErrorType<unknown>

export const useTeamsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof teamsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTeamsRetrieveKey(id) : null);
  const swrFn = () => teamsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsUpdate = (
    id: string,
    teamRequest: BodyType<TeamRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Team>(
    {url: `/teams/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: teamRequest
    },
    options);
  }



export const getTeamsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: TeamRequest }): Promise<Team> => {
    return teamsUpdate(id, arg, options);
  }
}
export const getTeamsUpdateMutationKey = (id: string,) => [`/teams/${id}/`] as const;

export type TeamsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof teamsUpdate>>>
export type TeamsUpdateMutationError = ErrorType<unknown>

export const useTeamsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof teamsUpdate>>, TError, Key, TeamRequest, Awaited<ReturnType<typeof teamsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTeamsUpdateMutationKey(id);
  const swrFn = getTeamsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsPartialUpdate = (
    id: string,
    patchedTeamUpdateRequest: BodyType<PatchedTeamUpdateRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<TeamUpdate>(
    {url: `/teams/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedTeamUpdateRequest
    },
    options);
  }



export const getTeamsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedTeamUpdateRequest }): Promise<TeamUpdate> => {
    return teamsPartialUpdate(id, arg, options);
  }
}
export const getTeamsPartialUpdateMutationKey = (id: string,) => [`/teams/${id}/`] as const;

export type TeamsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof teamsPartialUpdate>>>
export type TeamsPartialUpdateMutationError = ErrorType<unknown>

export const useTeamsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof teamsPartialUpdate>>, TError, Key, PatchedTeamUpdateRequest, Awaited<ReturnType<typeof teamsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTeamsPartialUpdateMutationKey(id);
  const swrFn = getTeamsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows teams to be viewed or edited.
 */
export const teamsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/teams/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getTeamsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return teamsDestroy(id, options);
  }
}
export const getTeamsDestroyMutationKey = (id: string,) => [`/teams/${id}/`] as const;

export type TeamsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof teamsDestroy>>>
export type TeamsDestroyMutationError = ErrorType<unknown>

export const useTeamsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof teamsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof teamsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTeamsDestroyMutationKey(id);
  const swrFn = getTeamsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesList = (
    params?: UploadedFilesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<FileUpload[]>(
    {url: `/uploaded_files/`, method: 'GET',
        params
    },
    options);
  }



export const getUploadedFilesListKey = (params?: UploadedFilesListParams,) => [`/uploaded_files/`, ...(params ? [params]: [])] as const;

export type UploadedFilesListQueryResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesList>>>
export type UploadedFilesListQueryError = ErrorType<unknown>

export const useUploadedFilesList = <TError = ErrorType<unknown>>(
  params?: UploadedFilesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof uploadedFilesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUploadedFilesListKey(params) : null);
  const swrFn = () => uploadedFilesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesCreate = (
    fileUploadRequest: BodyType<FileUploadRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<FileUpload>(
    {url: `/uploaded_files/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fileUploadRequest
    },
    options);
  }



export const getUploadedFilesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: FileUploadRequest }): Promise<FileUpload> => {
    return uploadedFilesCreate(arg, options);
  }
}
export const getUploadedFilesCreateMutationKey = () => [`/uploaded_files/`] as const;

export type UploadedFilesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesCreate>>>
export type UploadedFilesCreateMutationError = ErrorType<unknown>

export const useUploadedFilesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof uploadedFilesCreate>>, TError, Key, FileUploadRequest, Awaited<ReturnType<typeof uploadedFilesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUploadedFilesCreateMutationKey();
  const swrFn = getUploadedFilesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<FileUpload>(
    {url: `/uploaded_files/${id}/`, method: 'GET'
    },
    options);
  }



export const getUploadedFilesRetrieveKey = (id: string,) => [`/uploaded_files/${id}/`] as const;

export type UploadedFilesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesRetrieve>>>
export type UploadedFilesRetrieveQueryError = ErrorType<unknown>

export const useUploadedFilesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof uploadedFilesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUploadedFilesRetrieveKey(id) : null);
  const swrFn = () => uploadedFilesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesUpdate = (
    id: string,
    fileUploadRequest: BodyType<FileUploadRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<FileUpload>(
    {url: `/uploaded_files/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: fileUploadRequest
    },
    options);
  }



export const getUploadedFilesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: FileUploadRequest }): Promise<FileUpload> => {
    return uploadedFilesUpdate(id, arg, options);
  }
}
export const getUploadedFilesUpdateMutationKey = (id: string,) => [`/uploaded_files/${id}/`] as const;

export type UploadedFilesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesUpdate>>>
export type UploadedFilesUpdateMutationError = ErrorType<unknown>

export const useUploadedFilesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof uploadedFilesUpdate>>, TError, Key, FileUploadRequest, Awaited<ReturnType<typeof uploadedFilesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUploadedFilesUpdateMutationKey(id);
  const swrFn = getUploadedFilesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesPartialUpdate = (
    id: string,
    patchedFileUploadRequest: BodyType<PatchedFileUploadRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<FileUpload>(
    {url: `/uploaded_files/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedFileUploadRequest
    },
    options);
  }



export const getUploadedFilesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedFileUploadRequest }): Promise<FileUpload> => {
    return uploadedFilesPartialUpdate(id, arg, options);
  }
}
export const getUploadedFilesPartialUpdateMutationKey = (id: string,) => [`/uploaded_files/${id}/`] as const;

export type UploadedFilesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesPartialUpdate>>>
export type UploadedFilesPartialUpdateMutationError = ErrorType<unknown>

export const useUploadedFilesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof uploadedFilesPartialUpdate>>, TError, Key, PatchedFileUploadRequest, Awaited<ReturnType<typeof uploadedFilesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUploadedFilesPartialUpdateMutationKey(id);
  const swrFn = getUploadedFilesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows files to be viewed or edited.
 */
export const uploadedFilesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/uploaded_files/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getUploadedFilesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return uploadedFilesDestroy(id, options);
  }
}
export const getUploadedFilesDestroyMutationKey = (id: string,) => [`/uploaded_files/${id}/`] as const;

export type UploadedFilesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof uploadedFilesDestroy>>>
export type UploadedFilesDestroyMutationError = ErrorType<unknown>

export const useUploadedFilesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof uploadedFilesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof uploadedFilesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUploadedFilesDestroyMutationKey(id);
  const swrFn = getUploadedFilesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesList = (
    params?: WorkshopattendeesListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<WorkshopAttendee[]>(
    {url: `/workshopattendees/`, method: 'GET',
        params
    },
    options);
  }



export const getWorkshopattendeesListKey = (params?: WorkshopattendeesListParams,) => [`/workshopattendees/`, ...(params ? [params]: [])] as const;

export type WorkshopattendeesListQueryResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesList>>>
export type WorkshopattendeesListQueryError = ErrorType<unknown>

export const useWorkshopattendeesList = <TError = ErrorType<unknown>>(
  params?: WorkshopattendeesListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof workshopattendeesList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getWorkshopattendeesListKey(params) : null);
  const swrFn = () => workshopattendeesList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesCreate = (
    workshopAttendeeRequest: BodyType<WorkshopAttendeeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<WorkshopAttendee>(
    {url: `/workshopattendees/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: workshopAttendeeRequest
    },
    options);
  }



export const getWorkshopattendeesCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: WorkshopAttendeeRequest }): Promise<WorkshopAttendee> => {
    return workshopattendeesCreate(arg, options);
  }
}
export const getWorkshopattendeesCreateMutationKey = () => [`/workshopattendees/`] as const;

export type WorkshopattendeesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesCreate>>>
export type WorkshopattendeesCreateMutationError = ErrorType<unknown>

export const useWorkshopattendeesCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopattendeesCreate>>, TError, Key, WorkshopAttendeeRequest, Awaited<ReturnType<typeof workshopattendeesCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopattendeesCreateMutationKey();
  const swrFn = getWorkshopattendeesCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<WorkshopAttendee>(
    {url: `/workshopattendees/${id}/`, method: 'GET'
    },
    options);
  }



export const getWorkshopattendeesRetrieveKey = (id: string,) => [`/workshopattendees/${id}/`] as const;

export type WorkshopattendeesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesRetrieve>>>
export type WorkshopattendeesRetrieveQueryError = ErrorType<unknown>

export const useWorkshopattendeesRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof workshopattendeesRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getWorkshopattendeesRetrieveKey(id) : null);
  const swrFn = () => workshopattendeesRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesUpdate = (
    id: string,
    workshopAttendeeRequest: BodyType<WorkshopAttendeeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<WorkshopAttendee>(
    {url: `/workshopattendees/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: workshopAttendeeRequest
    },
    options);
  }



export const getWorkshopattendeesUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: WorkshopAttendeeRequest }): Promise<WorkshopAttendee> => {
    return workshopattendeesUpdate(id, arg, options);
  }
}
export const getWorkshopattendeesUpdateMutationKey = (id: string,) => [`/workshopattendees/${id}/`] as const;

export type WorkshopattendeesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesUpdate>>>
export type WorkshopattendeesUpdateMutationError = ErrorType<unknown>

export const useWorkshopattendeesUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopattendeesUpdate>>, TError, Key, WorkshopAttendeeRequest, Awaited<ReturnType<typeof workshopattendeesUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopattendeesUpdateMutationKey(id);
  const swrFn = getWorkshopattendeesUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesPartialUpdate = (
    id: string,
    patchedWorkshopAttendeeRequest: BodyType<PatchedWorkshopAttendeeRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<WorkshopAttendee>(
    {url: `/workshopattendees/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedWorkshopAttendeeRequest
    },
    options);
  }



export const getWorkshopattendeesPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedWorkshopAttendeeRequest }): Promise<WorkshopAttendee> => {
    return workshopattendeesPartialUpdate(id, arg, options);
  }
}
export const getWorkshopattendeesPartialUpdateMutationKey = (id: string,) => [`/workshopattendees/${id}/`] as const;

export type WorkshopattendeesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesPartialUpdate>>>
export type WorkshopattendeesPartialUpdateMutationError = ErrorType<unknown>

export const useWorkshopattendeesPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopattendeesPartialUpdate>>, TError, Key, PatchedWorkshopAttendeeRequest, Awaited<ReturnType<typeof workshopattendeesPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopattendeesPartialUpdateMutationKey(id);
  const swrFn = getWorkshopattendeesPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export const workshopattendeesDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/workshopattendees/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getWorkshopattendeesDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return workshopattendeesDestroy(id, options);
  }
}
export const getWorkshopattendeesDestroyMutationKey = (id: string,) => [`/workshopattendees/${id}/`] as const;

export type WorkshopattendeesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof workshopattendeesDestroy>>>
export type WorkshopattendeesDestroyMutationError = ErrorType<unknown>

export const useWorkshopattendeesDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopattendeesDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof workshopattendeesDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopattendeesDestroyMutationKey(id);
  const swrFn = getWorkshopattendeesDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsList = (
    params?: WorkshopsListParams,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Workshop[]>(
    {url: `/workshops/`, method: 'GET',
        params
    },
    options);
  }



export const getWorkshopsListKey = (params?: WorkshopsListParams,) => [`/workshops/`, ...(params ? [params]: [])] as const;

export type WorkshopsListQueryResult = NonNullable<Awaited<ReturnType<typeof workshopsList>>>
export type WorkshopsListQueryError = ErrorType<unknown>

export const useWorkshopsList = <TError = ErrorType<unknown>>(
  params?: WorkshopsListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof workshopsList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getWorkshopsListKey(params) : null);
  const swrFn = () => workshopsList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsCreate = (
    workshopRequest: BodyType<WorkshopRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Workshop>(
    {url: `/workshops/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: workshopRequest
    },
    options);
  }



export const getWorkshopsCreateMutationFetcher = ( options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: WorkshopRequest }): Promise<Workshop> => {
    return workshopsCreate(arg, options);
  }
}
export const getWorkshopsCreateMutationKey = () => [`/workshops/`] as const;

export type WorkshopsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopsCreate>>>
export type WorkshopsCreateMutationError = ErrorType<unknown>

export const useWorkshopsCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopsCreate>>, TError, Key, WorkshopRequest, Awaited<ReturnType<typeof workshopsCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopsCreateMutationKey();
  const swrFn = getWorkshopsCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Workshop>(
    {url: `/workshops/${id}/`, method: 'GET'
    },
    options);
  }



export const getWorkshopsRetrieveKey = (id: string,) => [`/workshops/${id}/`] as const;

export type WorkshopsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof workshopsRetrieve>>>
export type WorkshopsRetrieveQueryError = ErrorType<unknown>

export const useWorkshopsRetrieve = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof workshopsRetrieve>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customAxios> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getWorkshopsRetrieveKey(id) : null);
  const swrFn = () => workshopsRetrieve(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsUpdate = (
    id: string,
    workshopRequest: BodyType<WorkshopRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Workshop>(
    {url: `/workshops/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: workshopRequest
    },
    options);
  }



export const getWorkshopsUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: WorkshopRequest }): Promise<Workshop> => {
    return workshopsUpdate(id, arg, options);
  }
}
export const getWorkshopsUpdateMutationKey = (id: string,) => [`/workshops/${id}/`] as const;

export type WorkshopsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopsUpdate>>>
export type WorkshopsUpdateMutationError = ErrorType<unknown>

export const useWorkshopsUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopsUpdate>>, TError, Key, WorkshopRequest, Awaited<ReturnType<typeof workshopsUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopsUpdateMutationKey(id);
  const swrFn = getWorkshopsUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsPartialUpdate = (
    id: string,
    patchedWorkshopRequest: BodyType<PatchedWorkshopRequest>,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<Workshop>(
    {url: `/workshops/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedWorkshopRequest
    },
    options);
  }



export const getWorkshopsPartialUpdateMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, { arg }: { arg: PatchedWorkshopRequest }): Promise<Workshop> => {
    return workshopsPartialUpdate(id, arg, options);
  }
}
export const getWorkshopsPartialUpdateMutationKey = (id: string,) => [`/workshops/${id}/`] as const;

export type WorkshopsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof workshopsPartialUpdate>>>
export type WorkshopsPartialUpdateMutationError = ErrorType<unknown>

export const useWorkshopsPartialUpdate = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopsPartialUpdate>>, TError, Key, PatchedWorkshopRequest, Awaited<ReturnType<typeof workshopsPartialUpdate>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopsPartialUpdateMutationKey(id);
  const swrFn = getWorkshopsPartialUpdateMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export const workshopsDestroy = (
    id: string,
 options?: SecondParameter<typeof customAxios>) => {
    return customAxios<void>(
    {url: `/workshops/${id}/`, method: 'DELETE'
    },
    options);
  }



export const getWorkshopsDestroyMutationFetcher = (id: string, options?: SecondParameter<typeof customAxios>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return workshopsDestroy(id, options);
  }
}
export const getWorkshopsDestroyMutationKey = (id: string,) => [`/workshops/${id}/`] as const;

export type WorkshopsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof workshopsDestroy>>>
export type WorkshopsDestroyMutationError = ErrorType<unknown>

export const useWorkshopsDestroy = <TError = ErrorType<unknown>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof workshopsDestroy>>, TError, Key, Arguments, Awaited<ReturnType<typeof workshopsDestroy>>> & { swrKey?: string }, request?: SecondParameter<typeof customAxios>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getWorkshopsDestroyMutationKey(id);
  const swrFn = getWorkshopsDestroyMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

