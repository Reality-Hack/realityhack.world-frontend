/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import type {
  Application,
  ApplicationRequest,
  ApplicationsListParams,
  Attendee,
  AttendeeList,
  AttendeePatch,
  AttendeePreference,
  AttendeePreferenceRequest,
  AttendeeRSVP,
  AttendeeRSVPCreate,
  AttendeeRSVPCreateRequest,
  AttendeeRSVPRequest,
  AttendeeRequest,
  AttendeepreferencesListParams,
  AttendeesListParams,
  DestinyTeam,
  DestinyTeamAttendeeVibe,
  DestinyTeamAttendeeVibeRequest,
  DestinyTeamUpdate,
  DestinyTeamUpdateRequest,
  DestinyteamattendeevibesListParams,
  DestinyteamsListParams,
  DiscordUsernameRole,
  FileUpload,
  FileUploadRequest,
  GroupDetail,
  GroupDetailRequest,
  GroupsListParams,
  Hardware,
  HardwareCreate,
  HardwareCreateRequest,
  HardwareDevice,
  HardwareDeviceDetail,
  HardwareDeviceHistory,
  HardwareDeviceHistoryRequest,
  HardwareDeviceRequest,
  HardwareListParams,
  HardwareRequest,
  HardwareRequestCreate,
  HardwareRequestCreateRequest,
  HardwareRequestDetail,
  HardwareRequestList,
  HardwareRequestListRequest,
  HardwaredevicehistoryListParams,
  HardwaredevicesListParams,
  HardwarerequestsListParams,
  LightHouse,
  LightHouseRequest,
  Location,
  LocationRequest,
  LocationsListParams,
  MentorHelpRequest,
  MentorHelpRequestHistory,
  MentorHelpRequestHistoryRequest,
  MentorHelpRequestRead,
  MentorHelpRequestRequest,
  MentorhelprequestsListParams,
  MentorhelprequestshistoryListParams,
  PatchedApplicationRequest,
  PatchedAttendeePatchRequest,
  PatchedAttendeePreferenceRequest,
  PatchedAttendeeRSVPRequest,
  PatchedDestinyTeamAttendeeVibeRequest,
  PatchedDestinyTeamUpdateRequest,
  PatchedFileUploadRequest,
  PatchedGroupDetailRequest,
  PatchedHardwareCreateRequest,
  PatchedHardwareDeviceHistoryRequest,
  PatchedHardwareDeviceRequest,
  PatchedHardwareRequestRequest,
  PatchedLocationRequest,
  PatchedMentorHelpRequestHistoryRequest,
  PatchedMentorHelpRequestRequest,
  PatchedProjectRequest,
  PatchedSkillProficiencyCreateRequest,
  PatchedSkillRequest,
  PatchedTableRequest,
  PatchedTeamUpdateRequest,
  PatchedWorkshopAttendeeRequest,
  PatchedWorkshopRequest,
  Project,
  ProjectRequest,
  ProjectsListParams,
  RsvpsListParams,
  Skill,
  SkillProficiency,
  SkillProficiencyCreate,
  SkillProficiencyCreateRequest,
  SkillProficiencyDetail,
  SkillProficiencyRequest,
  SkillRequest,
  SkillproficienciesListParams,
  SkillsListParams,
  Table,
  TableCreate,
  TableCreateRequest,
  TableRequest,
  TablesListParams,
  Team,
  TeamCreate,
  TeamCreateRequest,
  TeamDetail,
  TeamRequest,
  TeamUpdate,
  TeamsListParams,
  TokenObtainPair,
  TokenObtainPairRequest,
  TokenRefresh,
  TokenRefreshRequest,
  TokenVerifyRequest,
  UploadedFilesListParams,
  Workshop,
  WorkshopAttendee,
  WorkshopAttendeeRequest,
  WorkshopRequest,
  WorkshopattendeesListParams,
  WorkshopsListParams
} from './models';


/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsListResponse200 = {
  data: Application[]
  status: 200
}
    
export type applicationsListResponseComposite = applicationsListResponse200;
    
export type applicationsListResponse = applicationsListResponseComposite & {
  headers: Headers;
}

export const getApplicationsListUrl = (params?: ApplicationsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/applications/?${stringifiedParams}` : `/backend/applications/`
}

export const applicationsList = async (params?: ApplicationsListParams, options?: RequestInit): Promise<applicationsListResponse> => {
  
  const res = await fetch(getApplicationsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsListResponse
}



/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsCreateResponse201 = {
  data: Application
  status: 201
}
    
export type applicationsCreateResponseComposite = applicationsCreateResponse201;
    
export type applicationsCreateResponse = applicationsCreateResponseComposite & {
  headers: Headers;
}

export const getApplicationsCreateUrl = () => {


  

  return `/backend/applications/`
}

export const applicationsCreate = async (applicationRequest: ApplicationRequest, options?: RequestInit): Promise<applicationsCreateResponse> => {
  
  const res = await fetch(getApplicationsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      applicationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsCreateResponse
}



/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsRetrieveResponse200 = {
  data: Application
  status: 200
}
    
export type applicationsRetrieveResponseComposite = applicationsRetrieveResponse200;
    
export type applicationsRetrieveResponse = applicationsRetrieveResponseComposite & {
  headers: Headers;
}

export const getApplicationsRetrieveUrl = (id: string,) => {


  

  return `/backend/applications/${id}/`
}

export const applicationsRetrieve = async (id: string, options?: RequestInit): Promise<applicationsRetrieveResponse> => {
  
  const res = await fetch(getApplicationsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsRetrieveResponse
}



/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsUpdateResponse200 = {
  data: Application
  status: 200
}
    
export type applicationsUpdateResponseComposite = applicationsUpdateResponse200;
    
export type applicationsUpdateResponse = applicationsUpdateResponseComposite & {
  headers: Headers;
}

export const getApplicationsUpdateUrl = (id: string,) => {


  

  return `/backend/applications/${id}/`
}

export const applicationsUpdate = async (id: string,
    applicationRequest: ApplicationRequest, options?: RequestInit): Promise<applicationsUpdateResponse> => {
  
  const res = await fetch(getApplicationsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      applicationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsUpdateResponse
}



/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsPartialUpdateResponse200 = {
  data: Application
  status: 200
}
    
export type applicationsPartialUpdateResponseComposite = applicationsPartialUpdateResponse200;
    
export type applicationsPartialUpdateResponse = applicationsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getApplicationsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/applications/${id}/`
}

export const applicationsPartialUpdate = async (id: string,
    patchedApplicationRequest: PatchedApplicationRequest, options?: RequestInit): Promise<applicationsPartialUpdateResponse> => {
  
  const res = await fetch(getApplicationsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedApplicationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsPartialUpdateResponse
}



/**
 * API endpoint that allows applications to be viewed or edited.
 */
export type applicationsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type applicationsDestroyResponseComposite = applicationsDestroyResponse204;
    
export type applicationsDestroyResponse = applicationsDestroyResponseComposite & {
  headers: Headers;
}

export const getApplicationsDestroyUrl = (id: string,) => {


  

  return `/backend/applications/${id}/`
}

export const applicationsDestroy = async (id: string, options?: RequestInit): Promise<applicationsDestroyResponse> => {
  
  const res = await fetch(getApplicationsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: applicationsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as applicationsDestroyResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesListResponse200 = {
  data: AttendeePreference[]
  status: 200
}
    
export type attendeepreferencesListResponseComposite = attendeepreferencesListResponse200;
    
export type attendeepreferencesListResponse = attendeepreferencesListResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesListUrl = (params?: AttendeepreferencesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/attendeepreferences/?${stringifiedParams}` : `/backend/attendeepreferences/`
}

export const attendeepreferencesList = async (params?: AttendeepreferencesListParams, options?: RequestInit): Promise<attendeepreferencesListResponse> => {
  
  const res = await fetch(getAttendeepreferencesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesListResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesCreateResponse201 = {
  data: AttendeePreference
  status: 201
}
    
export type attendeepreferencesCreateResponseComposite = attendeepreferencesCreateResponse201;
    
export type attendeepreferencesCreateResponse = attendeepreferencesCreateResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesCreateUrl = () => {


  

  return `/backend/attendeepreferences/`
}

export const attendeepreferencesCreate = async (attendeePreferenceRequest: AttendeePreferenceRequest, options?: RequestInit): Promise<attendeepreferencesCreateResponse> => {
  
  const res = await fetch(getAttendeepreferencesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeePreferenceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesCreateResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesRetrieveResponse200 = {
  data: AttendeePreference
  status: 200
}
    
export type attendeepreferencesRetrieveResponseComposite = attendeepreferencesRetrieveResponse200;
    
export type attendeepreferencesRetrieveResponse = attendeepreferencesRetrieveResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesRetrieveUrl = (id: string,) => {


  

  return `/backend/attendeepreferences/${id}/`
}

export const attendeepreferencesRetrieve = async (id: string, options?: RequestInit): Promise<attendeepreferencesRetrieveResponse> => {
  
  const res = await fetch(getAttendeepreferencesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesRetrieveResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesUpdateResponse200 = {
  data: AttendeePreference
  status: 200
}
    
export type attendeepreferencesUpdateResponseComposite = attendeepreferencesUpdateResponse200;
    
export type attendeepreferencesUpdateResponse = attendeepreferencesUpdateResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesUpdateUrl = (id: string,) => {


  

  return `/backend/attendeepreferences/${id}/`
}

export const attendeepreferencesUpdate = async (id: string,
    attendeePreferenceRequest: AttendeePreferenceRequest, options?: RequestInit): Promise<attendeepreferencesUpdateResponse> => {
  
  const res = await fetch(getAttendeepreferencesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeePreferenceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesUpdateResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesPartialUpdateResponse200 = {
  data: AttendeePreference
  status: 200
}
    
export type attendeepreferencesPartialUpdateResponseComposite = attendeepreferencesPartialUpdateResponse200;
    
export type attendeepreferencesPartialUpdateResponse = attendeepreferencesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/attendeepreferences/${id}/`
}

export const attendeepreferencesPartialUpdate = async (id: string,
    patchedAttendeePreferenceRequest: PatchedAttendeePreferenceRequest, options?: RequestInit): Promise<attendeepreferencesPartialUpdateResponse> => {
  
  const res = await fetch(getAttendeepreferencesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedAttendeePreferenceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesPartialUpdateResponse
}



/**
 * API endpoint that allows attendee preferences to be viewed or edited.
 */
export type attendeepreferencesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type attendeepreferencesDestroyResponseComposite = attendeepreferencesDestroyResponse204;
    
export type attendeepreferencesDestroyResponse = attendeepreferencesDestroyResponseComposite & {
  headers: Headers;
}

export const getAttendeepreferencesDestroyUrl = (id: string,) => {


  

  return `/backend/attendeepreferences/${id}/`
}

export const attendeepreferencesDestroy = async (id: string, options?: RequestInit): Promise<attendeepreferencesDestroyResponse> => {
  
  const res = await fetch(getAttendeepreferencesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeepreferencesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeepreferencesDestroyResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesListResponse200 = {
  data: AttendeeList[]
  status: 200
}
    
export type attendeesListResponseComposite = attendeesListResponse200;
    
export type attendeesListResponse = attendeesListResponseComposite & {
  headers: Headers;
}

export const getAttendeesListUrl = (params?: AttendeesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/attendees/?${stringifiedParams}` : `/backend/attendees/`
}

export const attendeesList = async (params?: AttendeesListParams, options?: RequestInit): Promise<attendeesListResponse> => {
  
  const res = await fetch(getAttendeesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesListResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesCreateResponse201 = {
  data: Attendee
  status: 201
}
    
export type attendeesCreateResponseComposite = attendeesCreateResponse201;
    
export type attendeesCreateResponse = attendeesCreateResponseComposite & {
  headers: Headers;
}

export const getAttendeesCreateUrl = () => {


  

  return `/backend/attendees/`
}

export const attendeesCreate = async (attendeeRequest: AttendeeRequest, options?: RequestInit): Promise<attendeesCreateResponse> => {
  
  const res = await fetch(getAttendeesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesCreateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesRetrieveResponse200 = {
  data: Attendee
  status: 200
}
    
export type attendeesRetrieveResponseComposite = attendeesRetrieveResponse200;
    
export type attendeesRetrieveResponse = attendeesRetrieveResponseComposite & {
  headers: Headers;
}

export const getAttendeesRetrieveUrl = (id: string,) => {


  

  return `/backend/attendees/${id}/`
}

export const attendeesRetrieve = async (id: string, options?: RequestInit): Promise<attendeesRetrieveResponse> => {
  
  const res = await fetch(getAttendeesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesRetrieveResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesUpdateResponse200 = {
  data: Attendee
  status: 200
}
    
export type attendeesUpdateResponseComposite = attendeesUpdateResponse200;
    
export type attendeesUpdateResponse = attendeesUpdateResponseComposite & {
  headers: Headers;
}

export const getAttendeesUpdateUrl = (id: string,) => {


  

  return `/backend/attendees/${id}/`
}

export const attendeesUpdate = async (id: string,
    attendeeRequest: AttendeeRequest, options?: RequestInit): Promise<attendeesUpdateResponse> => {
  
  const res = await fetch(getAttendeesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesUpdateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesPartialUpdateResponse200 = {
  data: AttendeePatch
  status: 200
}
    
export type attendeesPartialUpdateResponseComposite = attendeesPartialUpdateResponse200;
    
export type attendeesPartialUpdateResponse = attendeesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getAttendeesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/attendees/${id}/`
}

export const attendeesPartialUpdate = async (id: string,
    patchedAttendeePatchRequest: PatchedAttendeePatchRequest, options?: RequestInit): Promise<attendeesPartialUpdateResponse> => {
  
  const res = await fetch(getAttendeesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedAttendeePatchRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesPartialUpdateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type attendeesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type attendeesDestroyResponseComposite = attendeesDestroyResponse204;
    
export type attendeesDestroyResponse = attendeesDestroyResponseComposite & {
  headers: Headers;
}

export const getAttendeesDestroyUrl = (id: string,) => {


  

  return `/backend/attendees/${id}/`
}

export const attendeesDestroy = async (id: string, options?: RequestInit): Promise<attendeesDestroyResponse> => {
  
  const res = await fetch(getAttendeesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: attendeesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as attendeesDestroyResponse
}



/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export type authTokenCreateResponse200 = {
  data: TokenObtainPair
  status: 200
}
    
export type authTokenCreateResponseComposite = authTokenCreateResponse200;
    
export type authTokenCreateResponse = authTokenCreateResponseComposite & {
  headers: Headers;
}

export const getAuthTokenCreateUrl = () => {


  

  return `/backend/auth/token/`
}

export const authTokenCreate = async (tokenObtainPairRequest: TokenObtainPairRequest, options?: RequestInit): Promise<authTokenCreateResponse> => {
  
  const res = await fetch(getAuthTokenCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tokenObtainPairRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: authTokenCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as authTokenCreateResponse
}



/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export type authTokenRefreshCreateResponse200 = {
  data: TokenRefresh
  status: 200
}
    
export type authTokenRefreshCreateResponseComposite = authTokenRefreshCreateResponse200;
    
export type authTokenRefreshCreateResponse = authTokenRefreshCreateResponseComposite & {
  headers: Headers;
}

export const getAuthTokenRefreshCreateUrl = () => {


  

  return `/backend/auth/token/refresh/`
}

export const authTokenRefreshCreate = async (tokenRefreshRequest: TokenRefreshRequest, options?: RequestInit): Promise<authTokenRefreshCreateResponse> => {
  
  const res = await fetch(getAuthTokenRefreshCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tokenRefreshRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: authTokenRefreshCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as authTokenRefreshCreateResponse
}



/**
 * Takes a token and indicates if it is valid.  This view provides no
information about a token's fitness for a particular use.
 */
export type authTokenVerifyCreateResponse200 = {
  data: void
  status: 200
}
    
export type authTokenVerifyCreateResponseComposite = authTokenVerifyCreateResponse200;
    
export type authTokenVerifyCreateResponse = authTokenVerifyCreateResponseComposite & {
  headers: Headers;
}

export const getAuthTokenVerifyCreateUrl = () => {


  

  return `/backend/auth/token/verify/`
}

export const authTokenVerifyCreate = async (tokenVerifyRequest: TokenVerifyRequest, options?: RequestInit): Promise<authTokenVerifyCreateResponse> => {
  
  const res = await fetch(getAuthTokenVerifyCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tokenVerifyRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: authTokenVerifyCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as authTokenVerifyCreateResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesListResponse200 = {
  data: DestinyTeamAttendeeVibe[]
  status: 200
}
    
export type destinyteamattendeevibesListResponseComposite = destinyteamattendeevibesListResponse200;
    
export type destinyteamattendeevibesListResponse = destinyteamattendeevibesListResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesListUrl = (params?: DestinyteamattendeevibesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/destinyteamattendeevibes/?${stringifiedParams}` : `/backend/destinyteamattendeevibes/`
}

export const destinyteamattendeevibesList = async (params?: DestinyteamattendeevibesListParams, options?: RequestInit): Promise<destinyteamattendeevibesListResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesListResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesCreateResponse201 = {
  data: DestinyTeamAttendeeVibe
  status: 201
}
    
export type destinyteamattendeevibesCreateResponseComposite = destinyteamattendeevibesCreateResponse201;
    
export type destinyteamattendeevibesCreateResponse = destinyteamattendeevibesCreateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesCreateUrl = () => {


  

  return `/backend/destinyteamattendeevibes/`
}

export const destinyteamattendeevibesCreate = async (destinyTeamAttendeeVibeRequest: DestinyTeamAttendeeVibeRequest, options?: RequestInit): Promise<destinyteamattendeevibesCreateResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      destinyTeamAttendeeVibeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesCreateResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesRetrieveResponse200 = {
  data: DestinyTeamAttendeeVibe
  status: 200
}
    
export type destinyteamattendeevibesRetrieveResponseComposite = destinyteamattendeevibesRetrieveResponse200;
    
export type destinyteamattendeevibesRetrieveResponse = destinyteamattendeevibesRetrieveResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesRetrieveUrl = (id: string,) => {


  

  return `/backend/destinyteamattendeevibes/${id}/`
}

export const destinyteamattendeevibesRetrieve = async (id: string, options?: RequestInit): Promise<destinyteamattendeevibesRetrieveResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesRetrieveResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesUpdateResponse200 = {
  data: DestinyTeamAttendeeVibe
  status: 200
}
    
export type destinyteamattendeevibesUpdateResponseComposite = destinyteamattendeevibesUpdateResponse200;
    
export type destinyteamattendeevibesUpdateResponse = destinyteamattendeevibesUpdateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesUpdateUrl = (id: string,) => {


  

  return `/backend/destinyteamattendeevibes/${id}/`
}

export const destinyteamattendeevibesUpdate = async (id: string,
    destinyTeamAttendeeVibeRequest: DestinyTeamAttendeeVibeRequest, options?: RequestInit): Promise<destinyteamattendeevibesUpdateResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      destinyTeamAttendeeVibeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesUpdateResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesPartialUpdateResponse200 = {
  data: DestinyTeamAttendeeVibe
  status: 200
}
    
export type destinyteamattendeevibesPartialUpdateResponseComposite = destinyteamattendeevibesPartialUpdateResponse200;
    
export type destinyteamattendeevibesPartialUpdateResponse = destinyteamattendeevibesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/destinyteamattendeevibes/${id}/`
}

export const destinyteamattendeevibesPartialUpdate = async (id: string,
    patchedDestinyTeamAttendeeVibeRequest: PatchedDestinyTeamAttendeeVibeRequest, options?: RequestInit): Promise<destinyteamattendeevibesPartialUpdateResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedDestinyTeamAttendeeVibeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesPartialUpdateResponse
}



/**
 * API endpoint that allows Detiny team attendee vibes to be viewed or edited.
 */
export type destinyteamattendeevibesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type destinyteamattendeevibesDestroyResponseComposite = destinyteamattendeevibesDestroyResponse204;
    
export type destinyteamattendeevibesDestroyResponse = destinyteamattendeevibesDestroyResponseComposite & {
  headers: Headers;
}

export const getDestinyteamattendeevibesDestroyUrl = (id: string,) => {


  

  return `/backend/destinyteamattendeevibes/${id}/`
}

export const destinyteamattendeevibesDestroy = async (id: string, options?: RequestInit): Promise<destinyteamattendeevibesDestroyResponse> => {
  
  const res = await fetch(getDestinyteamattendeevibesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamattendeevibesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamattendeevibesDestroyResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsListResponse200 = {
  data: DestinyTeam[]
  status: 200
}
    
export type destinyteamsListResponseComposite = destinyteamsListResponse200;
    
export type destinyteamsListResponse = destinyteamsListResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsListUrl = (params?: DestinyteamsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["attendees"];

    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/destinyteams/?${stringifiedParams}` : `/backend/destinyteams/`
}

export const destinyteamsList = async (params?: DestinyteamsListParams, options?: RequestInit): Promise<destinyteamsListResponse> => {
  
  const res = await fetch(getDestinyteamsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsListResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsCreateResponse201 = {
  data: DestinyTeamUpdate
  status: 201
}
    
export type destinyteamsCreateResponseComposite = destinyteamsCreateResponse201;
    
export type destinyteamsCreateResponse = destinyteamsCreateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsCreateUrl = () => {


  

  return `/backend/destinyteams/`
}

export const destinyteamsCreate = async (destinyTeamUpdateRequest: DestinyTeamUpdateRequest, options?: RequestInit): Promise<destinyteamsCreateResponse> => {
  
  const res = await fetch(getDestinyteamsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      destinyTeamUpdateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsCreateResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsRetrieveResponse200 = {
  data: DestinyTeam
  status: 200
}
    
export type destinyteamsRetrieveResponseComposite = destinyteamsRetrieveResponse200;
    
export type destinyteamsRetrieveResponse = destinyteamsRetrieveResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsRetrieveUrl = (id: string,) => {


  

  return `/backend/destinyteams/${id}/`
}

export const destinyteamsRetrieve = async (id: string, options?: RequestInit): Promise<destinyteamsRetrieveResponse> => {
  
  const res = await fetch(getDestinyteamsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsRetrieveResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsUpdateResponse200 = {
  data: DestinyTeamUpdate
  status: 200
}
    
export type destinyteamsUpdateResponseComposite = destinyteamsUpdateResponse200;
    
export type destinyteamsUpdateResponse = destinyteamsUpdateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsUpdateUrl = (id: string,) => {


  

  return `/backend/destinyteams/${id}/`
}

export const destinyteamsUpdate = async (id: string,
    destinyTeamUpdateRequest: DestinyTeamUpdateRequest, options?: RequestInit): Promise<destinyteamsUpdateResponse> => {
  
  const res = await fetch(getDestinyteamsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      destinyTeamUpdateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsUpdateResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsPartialUpdateResponse200 = {
  data: DestinyTeamUpdate
  status: 200
}
    
export type destinyteamsPartialUpdateResponseComposite = destinyteamsPartialUpdateResponse200;
    
export type destinyteamsPartialUpdateResponse = destinyteamsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/destinyteams/${id}/`
}

export const destinyteamsPartialUpdate = async (id: string,
    patchedDestinyTeamUpdateRequest: PatchedDestinyTeamUpdateRequest, options?: RequestInit): Promise<destinyteamsPartialUpdateResponse> => {
  
  const res = await fetch(getDestinyteamsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedDestinyTeamUpdateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsPartialUpdateResponse
}



/**
 * API endpoint that allows Destiny teams to be viewed or edited.
 */
export type destinyteamsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type destinyteamsDestroyResponseComposite = destinyteamsDestroyResponse204;
    
export type destinyteamsDestroyResponse = destinyteamsDestroyResponseComposite & {
  headers: Headers;
}

export const getDestinyteamsDestroyUrl = (id: string,) => {


  

  return `/backend/destinyteams/${id}/`
}

export const destinyteamsDestroy = async (id: string, options?: RequestInit): Promise<destinyteamsDestroyResponse> => {
  
  const res = await fetch(getDestinyteamsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: destinyteamsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as destinyteamsDestroyResponse
}



/**
 * API Endpoint that allows for Discord information to be viewed or edited.
 */
export type discordListResponse200 = {
  data: DiscordUsernameRole[]
  status: 200
}
    
export type discordListResponseComposite = discordListResponse200;
    
export type discordListResponse = discordListResponseComposite & {
  headers: Headers;
}

export const getDiscordListUrl = () => {


  

  return `/backend/discord/`
}

export const discordList = async ( options?: RequestInit): Promise<discordListResponse> => {
  
  const res = await fetch(getDiscordListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: discordListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as discordListResponse
}



/**
 * API Endpoint that allows for Discord information to be viewed or edited.
 */
export type discordDestroyResponse204 = {
  data: void
  status: 204
}
    
export type discordDestroyResponseComposite = discordDestroyResponse204;
    
export type discordDestroyResponse = discordDestroyResponseComposite & {
  headers: Headers;
}

export const getDiscordDestroyUrl = (attendeeCommunicationsPlatformUsername: string,) => {


  

  return `/backend/discord/${attendeeCommunicationsPlatformUsername}/`
}

export const discordDestroy = async (attendeeCommunicationsPlatformUsername: string, options?: RequestInit): Promise<discordDestroyResponse> => {
  
  const res = await fetch(getDiscordDestroyUrl(attendeeCommunicationsPlatformUsername),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: discordDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as discordDestroyResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsListResponse200 = {
  data: GroupDetail[]
  status: 200
}
    
export type groupsListResponseComposite = groupsListResponse200;
    
export type groupsListResponse = groupsListResponseComposite & {
  headers: Headers;
}

export const getGroupsListUrl = (params?: GroupsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/groups/?${stringifiedParams}` : `/backend/groups/`
}

export const groupsList = async (params?: GroupsListParams, options?: RequestInit): Promise<groupsListResponse> => {
  
  const res = await fetch(getGroupsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsListResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsCreateResponse201 = {
  data: GroupDetail
  status: 201
}
    
export type groupsCreateResponseComposite = groupsCreateResponse201;
    
export type groupsCreateResponse = groupsCreateResponseComposite & {
  headers: Headers;
}

export const getGroupsCreateUrl = () => {


  

  return `/backend/groups/`
}

export const groupsCreate = async (groupDetailRequest: GroupDetailRequest, options?: RequestInit): Promise<groupsCreateResponse> => {
  
  const res = await fetch(getGroupsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      groupDetailRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsCreateResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsRetrieveResponse200 = {
  data: GroupDetail
  status: 200
}
    
export type groupsRetrieveResponseComposite = groupsRetrieveResponse200;
    
export type groupsRetrieveResponse = groupsRetrieveResponseComposite & {
  headers: Headers;
}

export const getGroupsRetrieveUrl = (id: number,) => {


  

  return `/backend/groups/${id}/`
}

export const groupsRetrieve = async (id: number, options?: RequestInit): Promise<groupsRetrieveResponse> => {
  
  const res = await fetch(getGroupsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsRetrieveResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsUpdateResponse200 = {
  data: GroupDetail
  status: 200
}
    
export type groupsUpdateResponseComposite = groupsUpdateResponse200;
    
export type groupsUpdateResponse = groupsUpdateResponseComposite & {
  headers: Headers;
}

export const getGroupsUpdateUrl = (id: number,) => {


  

  return `/backend/groups/${id}/`
}

export const groupsUpdate = async (id: number,
    groupDetailRequest: GroupDetailRequest, options?: RequestInit): Promise<groupsUpdateResponse> => {
  
  const res = await fetch(getGroupsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      groupDetailRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsUpdateResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsPartialUpdateResponse200 = {
  data: GroupDetail
  status: 200
}
    
export type groupsPartialUpdateResponseComposite = groupsPartialUpdateResponse200;
    
export type groupsPartialUpdateResponse = groupsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getGroupsPartialUpdateUrl = (id: number,) => {


  

  return `/backend/groups/${id}/`
}

export const groupsPartialUpdate = async (id: number,
    patchedGroupDetailRequest: PatchedGroupDetailRequest, options?: RequestInit): Promise<groupsPartialUpdateResponse> => {
  
  const res = await fetch(getGroupsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedGroupDetailRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsPartialUpdateResponse
}



/**
 * API endpoint that allows groups to be viewed or edited.
 */
export type groupsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type groupsDestroyResponseComposite = groupsDestroyResponse204;
    
export type groupsDestroyResponse = groupsDestroyResponseComposite & {
  headers: Headers;
}

export const getGroupsDestroyUrl = (id: number,) => {


  

  return `/backend/groups/${id}/`
}

export const groupsDestroy = async (id: number, options?: RequestInit): Promise<groupsDestroyResponse> => {
  
  const res = await fetch(getGroupsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: groupsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as groupsDestroyResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwareListResponse200 = {
  data: Hardware[]
  status: 200
}
    
export type hardwareListResponseComposite = hardwareListResponse200;
    
export type hardwareListResponse = hardwareListResponseComposite & {
  headers: Headers;
}

export const getHardwareListUrl = (params?: HardwareListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/hardware/?${stringifiedParams}` : `/backend/hardware/`
}

export const hardwareList = async (params?: HardwareListParams, options?: RequestInit): Promise<hardwareListResponse> => {
  
  const res = await fetch(getHardwareListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwareListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwareListResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwareCreateResponse201 = {
  data: HardwareCreate
  status: 201
}
    
export type hardwareCreateResponseComposite = hardwareCreateResponse201;
    
export type hardwareCreateResponse = hardwareCreateResponseComposite & {
  headers: Headers;
}

export const getHardwareCreateUrl = () => {


  

  return `/backend/hardware/`
}

export const hardwareCreate = async (hardwareCreateRequest: HardwareCreateRequest, options?: RequestInit): Promise<hardwareCreateResponse> => {
  
  const res = await fetch(getHardwareCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwareCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwareCreateResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwareRetrieveResponse200 = {
  data: Hardware
  status: 200
}
    
export type hardwareRetrieveResponseComposite = hardwareRetrieveResponse200;
    
export type hardwareRetrieveResponse = hardwareRetrieveResponseComposite & {
  headers: Headers;
}

export const getHardwareRetrieveUrl = (id: string,) => {


  

  return `/backend/hardware/${id}/`
}

export const hardwareRetrieve = async (id: string, options?: RequestInit): Promise<hardwareRetrieveResponse> => {
  
  const res = await fetch(getHardwareRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwareRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwareRetrieveResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwareUpdateResponse200 = {
  data: HardwareCreate
  status: 200
}
    
export type hardwareUpdateResponseComposite = hardwareUpdateResponse200;
    
export type hardwareUpdateResponse = hardwareUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwareUpdateUrl = (id: string,) => {


  

  return `/backend/hardware/${id}/`
}

export const hardwareUpdate = async (id: string,
    hardwareCreateRequest: HardwareCreateRequest, options?: RequestInit): Promise<hardwareUpdateResponse> => {
  
  const res = await fetch(getHardwareUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwareUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwareUpdateResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwarePartialUpdateResponse200 = {
  data: HardwareCreate
  status: 200
}
    
export type hardwarePartialUpdateResponseComposite = hardwarePartialUpdateResponse200;
    
export type hardwarePartialUpdateResponse = hardwarePartialUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwarePartialUpdateUrl = (id: string,) => {


  

  return `/backend/hardware/${id}/`
}

export const hardwarePartialUpdate = async (id: string,
    patchedHardwareCreateRequest: PatchedHardwareCreateRequest, options?: RequestInit): Promise<hardwarePartialUpdateResponse> => {
  
  const res = await fetch(getHardwarePartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedHardwareCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarePartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarePartialUpdateResponse
}



/**
 * API endpoint that allows hardware to be viewed or edited.
 */
export type hardwareDestroyResponse204 = {
  data: void
  status: 204
}
    
export type hardwareDestroyResponseComposite = hardwareDestroyResponse204;
    
export type hardwareDestroyResponse = hardwareDestroyResponseComposite & {
  headers: Headers;
}

export const getHardwareDestroyUrl = (id: string,) => {


  

  return `/backend/hardware/${id}/`
}

export const hardwareDestroy = async (id: string, options?: RequestInit): Promise<hardwareDestroyResponse> => {
  
  const res = await fetch(getHardwareDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwareDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwareDestroyResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryListResponse200 = {
  data: HardwareDeviceHistory[]
  status: 200
}
    
export type hardwaredevicehistoryListResponseComposite = hardwaredevicehistoryListResponse200;
    
export type hardwaredevicehistoryListResponse = hardwaredevicehistoryListResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryListUrl = (params?: HardwaredevicehistoryListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/hardwaredevicehistory/?${stringifiedParams}` : `/backend/hardwaredevicehistory/`
}

export const hardwaredevicehistoryList = async (params?: HardwaredevicehistoryListParams, options?: RequestInit): Promise<hardwaredevicehistoryListResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryListResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryCreateResponse201 = {
  data: HardwareDeviceHistory
  status: 201
}
    
export type hardwaredevicehistoryCreateResponseComposite = hardwaredevicehistoryCreateResponse201;
    
export type hardwaredevicehistoryCreateResponse = hardwaredevicehistoryCreateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryCreateUrl = () => {


  

  return `/backend/hardwaredevicehistory/`
}

export const hardwaredevicehistoryCreate = async (hardwareDeviceHistoryRequest: HardwareDeviceHistoryRequest, options?: RequestInit): Promise<hardwaredevicehistoryCreateResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareDeviceHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryCreateResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryRetrieveResponse200 = {
  data: HardwareDeviceHistory
  status: 200
}
    
export type hardwaredevicehistoryRetrieveResponseComposite = hardwaredevicehistoryRetrieveResponse200;
    
export type hardwaredevicehistoryRetrieveResponse = hardwaredevicehistoryRetrieveResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryRetrieveUrl = (historyId: number,) => {


  

  return `/backend/hardwaredevicehistory/${historyId}/`
}

export const hardwaredevicehistoryRetrieve = async (historyId: number, options?: RequestInit): Promise<hardwaredevicehistoryRetrieveResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryRetrieveUrl(historyId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryRetrieveResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryUpdateResponse200 = {
  data: HardwareDeviceHistory
  status: 200
}
    
export type hardwaredevicehistoryUpdateResponseComposite = hardwaredevicehistoryUpdateResponse200;
    
export type hardwaredevicehistoryUpdateResponse = hardwaredevicehistoryUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryUpdateUrl = (historyId: number,) => {


  

  return `/backend/hardwaredevicehistory/${historyId}/`
}

export const hardwaredevicehistoryUpdate = async (historyId: number,
    hardwareDeviceHistoryRequest: HardwareDeviceHistoryRequest, options?: RequestInit): Promise<hardwaredevicehistoryUpdateResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryUpdateUrl(historyId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareDeviceHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryUpdateResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryPartialUpdateResponse200 = {
  data: HardwareDeviceHistory
  status: 200
}
    
export type hardwaredevicehistoryPartialUpdateResponseComposite = hardwaredevicehistoryPartialUpdateResponse200;
    
export type hardwaredevicehistoryPartialUpdateResponse = hardwaredevicehistoryPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryPartialUpdateUrl = (historyId: number,) => {


  

  return `/backend/hardwaredevicehistory/${historyId}/`
}

export const hardwaredevicehistoryPartialUpdate = async (historyId: number,
    patchedHardwareDeviceHistoryRequest: PatchedHardwareDeviceHistoryRequest, options?: RequestInit): Promise<hardwaredevicehistoryPartialUpdateResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryPartialUpdateUrl(historyId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedHardwareDeviceHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryPartialUpdateResponse
}



/**
 * API endpoint that allows hardware device historical records to be viewed.
 */
export type hardwaredevicehistoryDestroyResponse204 = {
  data: void
  status: 204
}
    
export type hardwaredevicehistoryDestroyResponseComposite = hardwaredevicehistoryDestroyResponse204;
    
export type hardwaredevicehistoryDestroyResponse = hardwaredevicehistoryDestroyResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicehistoryDestroyUrl = (historyId: number,) => {


  

  return `/backend/hardwaredevicehistory/${historyId}/`
}

export const hardwaredevicehistoryDestroy = async (historyId: number, options?: RequestInit): Promise<hardwaredevicehistoryDestroyResponse> => {
  
  const res = await fetch(getHardwaredevicehistoryDestroyUrl(historyId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicehistoryDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicehistoryDestroyResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesListResponse200 = {
  data: HardwareDevice[]
  status: 200
}
    
export type hardwaredevicesListResponseComposite = hardwaredevicesListResponse200;
    
export type hardwaredevicesListResponse = hardwaredevicesListResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesListUrl = (params?: HardwaredevicesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/hardwaredevices/?${stringifiedParams}` : `/backend/hardwaredevices/`
}

export const hardwaredevicesList = async (params?: HardwaredevicesListParams, options?: RequestInit): Promise<hardwaredevicesListResponse> => {
  
  const res = await fetch(getHardwaredevicesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesListResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesCreateResponse201 = {
  data: HardwareDevice
  status: 201
}
    
export type hardwaredevicesCreateResponseComposite = hardwaredevicesCreateResponse201;
    
export type hardwaredevicesCreateResponse = hardwaredevicesCreateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesCreateUrl = () => {


  

  return `/backend/hardwaredevices/`
}

export const hardwaredevicesCreate = async (hardwareDeviceRequest: HardwareDeviceRequest, options?: RequestInit): Promise<hardwaredevicesCreateResponse> => {
  
  const res = await fetch(getHardwaredevicesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareDeviceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesCreateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesRetrieveResponse200 = {
  data: HardwareDeviceDetail
  status: 200
}
    
export type hardwaredevicesRetrieveResponseComposite = hardwaredevicesRetrieveResponse200;
    
export type hardwaredevicesRetrieveResponse = hardwaredevicesRetrieveResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesRetrieveUrl = (id: string,) => {


  

  return `/backend/hardwaredevices/${id}/`
}

export const hardwaredevicesRetrieve = async (id: string, options?: RequestInit): Promise<hardwaredevicesRetrieveResponse> => {
  
  const res = await fetch(getHardwaredevicesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesRetrieveResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesUpdateResponse200 = {
  data: HardwareDevice
  status: 200
}
    
export type hardwaredevicesUpdateResponseComposite = hardwaredevicesUpdateResponse200;
    
export type hardwaredevicesUpdateResponse = hardwaredevicesUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesUpdateUrl = (id: string,) => {


  

  return `/backend/hardwaredevices/${id}/`
}

export const hardwaredevicesUpdate = async (id: string,
    hardwareDeviceRequest: HardwareDeviceRequest, options?: RequestInit): Promise<hardwaredevicesUpdateResponse> => {
  
  const res = await fetch(getHardwaredevicesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareDeviceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesUpdateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesPartialUpdateResponse200 = {
  data: HardwareDevice
  status: 200
}
    
export type hardwaredevicesPartialUpdateResponseComposite = hardwaredevicesPartialUpdateResponse200;
    
export type hardwaredevicesPartialUpdateResponse = hardwaredevicesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/hardwaredevices/${id}/`
}

export const hardwaredevicesPartialUpdate = async (id: string,
    patchedHardwareDeviceRequest: PatchedHardwareDeviceRequest, options?: RequestInit): Promise<hardwaredevicesPartialUpdateResponse> => {
  
  const res = await fetch(getHardwaredevicesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedHardwareDeviceRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesPartialUpdateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwaredevicesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type hardwaredevicesDestroyResponseComposite = hardwaredevicesDestroyResponse204;
    
export type hardwaredevicesDestroyResponse = hardwaredevicesDestroyResponseComposite & {
  headers: Headers;
}

export const getHardwaredevicesDestroyUrl = (id: string,) => {


  

  return `/backend/hardwaredevices/${id}/`
}

export const hardwaredevicesDestroy = async (id: string, options?: RequestInit): Promise<hardwaredevicesDestroyResponse> => {
  
  const res = await fetch(getHardwaredevicesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwaredevicesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwaredevicesDestroyResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsListResponse200 = {
  data: HardwareRequestList[]
  status: 200
}
    
export type hardwarerequestsListResponseComposite = hardwarerequestsListResponse200;
    
export type hardwarerequestsListResponse = hardwarerequestsListResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsListUrl = (params?: HardwarerequestsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/hardwarerequests/?${stringifiedParams}` : `/backend/hardwarerequests/`
}

export const hardwarerequestsList = async (params?: HardwarerequestsListParams, options?: RequestInit): Promise<hardwarerequestsListResponse> => {
  
  const res = await fetch(getHardwarerequestsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsListResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsCreateResponse201 = {
  data: HardwareRequestCreate
  status: 201
}
    
export type hardwarerequestsCreateResponseComposite = hardwarerequestsCreateResponse201;
    
export type hardwarerequestsCreateResponse = hardwarerequestsCreateResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsCreateUrl = () => {


  

  return `/backend/hardwarerequests/`
}

export const hardwarerequestsCreate = async (hardwareRequestCreateRequest: HardwareRequestCreateRequest, options?: RequestInit): Promise<hardwarerequestsCreateResponse> => {
  
  const res = await fetch(getHardwarerequestsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareRequestCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsCreateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsRetrieveResponse200 = {
  data: HardwareRequestDetail
  status: 200
}
    
export type hardwarerequestsRetrieveResponseComposite = hardwarerequestsRetrieveResponse200;
    
export type hardwarerequestsRetrieveResponse = hardwarerequestsRetrieveResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsRetrieveUrl = (id: string,) => {


  

  return `/backend/hardwarerequests/${id}/`
}

export const hardwarerequestsRetrieve = async (id: string, options?: RequestInit): Promise<hardwarerequestsRetrieveResponse> => {
  
  const res = await fetch(getHardwarerequestsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsRetrieveResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsUpdateResponse200 = {
  data: HardwareRequestList
  status: 200
}
    
export type hardwarerequestsUpdateResponseComposite = hardwarerequestsUpdateResponse200;
    
export type hardwarerequestsUpdateResponse = hardwarerequestsUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsUpdateUrl = (id: string,) => {


  

  return `/backend/hardwarerequests/${id}/`
}

export const hardwarerequestsUpdate = async (id: string,
    hardwareRequestListRequest: HardwareRequestListRequest, options?: RequestInit): Promise<hardwarerequestsUpdateResponse> => {
  
  const res = await fetch(getHardwarerequestsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      hardwareRequestListRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsUpdateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsPartialUpdateResponse200 = {
  data: HardwareRequest
  status: 200
}
    
export type hardwarerequestsPartialUpdateResponseComposite = hardwarerequestsPartialUpdateResponse200;
    
export type hardwarerequestsPartialUpdateResponse = hardwarerequestsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/hardwarerequests/${id}/`
}

export const hardwarerequestsPartialUpdate = async (id: string,
    patchedHardwareRequestRequest: PatchedHardwareRequestRequest, options?: RequestInit): Promise<hardwarerequestsPartialUpdateResponse> => {
  
  const res = await fetch(getHardwarerequestsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedHardwareRequestRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsPartialUpdateResponse
}



/**
 * API endpoint that allows hardware devices to be viewed or edited.
 */
export type hardwarerequestsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type hardwarerequestsDestroyResponseComposite = hardwarerequestsDestroyResponse204;
    
export type hardwarerequestsDestroyResponse = hardwarerequestsDestroyResponseComposite & {
  headers: Headers;
}

export const getHardwarerequestsDestroyUrl = (id: string,) => {


  

  return `/backend/hardwarerequests/${id}/`
}

export const hardwarerequestsDestroy = async (id: string, options?: RequestInit): Promise<hardwarerequestsDestroyResponse> => {
  
  const res = await fetch(getHardwarerequestsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: hardwarerequestsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as hardwarerequestsDestroyResponse
}



/**
 * API endpoint that allows Reality Kits to be viewed or edited.
 */
export type lighthousesListResponse200 = {
  data: LightHouse[]
  status: 200
}
    
export type lighthousesListResponseComposite = lighthousesListResponse200;
    
export type lighthousesListResponse = lighthousesListResponseComposite & {
  headers: Headers;
}

export const getLighthousesListUrl = () => {


  

  return `/backend/lighthouses/`
}

export const lighthousesList = async ( options?: RequestInit): Promise<lighthousesListResponse> => {
  
  const res = await fetch(getLighthousesListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: lighthousesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as lighthousesListResponse
}



/**
 * API endpoint that allows Reality Kits to be viewed or edited.
 */
export type lighthousesCreateResponse201 = {
  data: LightHouse
  status: 201
}
    
export type lighthousesCreateResponseComposite = lighthousesCreateResponse201;
    
export type lighthousesCreateResponse = lighthousesCreateResponseComposite & {
  headers: Headers;
}

export const getLighthousesCreateUrl = () => {


  

  return `/backend/lighthouses/`
}

export const lighthousesCreate = async (lightHouseRequest: LightHouseRequest, options?: RequestInit): Promise<lighthousesCreateResponse> => {
  
  const res = await fetch(getLighthousesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      lightHouseRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: lighthousesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as lighthousesCreateResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsListResponse200 = {
  data: Location[]
  status: 200
}
    
export type locationsListResponseComposite = locationsListResponse200;
    
export type locationsListResponse = locationsListResponseComposite & {
  headers: Headers;
}

export const getLocationsListUrl = (params?: LocationsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/locations/?${stringifiedParams}` : `/backend/locations/`
}

export const locationsList = async (params?: LocationsListParams, options?: RequestInit): Promise<locationsListResponse> => {
  
  const res = await fetch(getLocationsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsListResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsCreateResponse201 = {
  data: Location
  status: 201
}
    
export type locationsCreateResponseComposite = locationsCreateResponse201;
    
export type locationsCreateResponse = locationsCreateResponseComposite & {
  headers: Headers;
}

export const getLocationsCreateUrl = () => {


  

  return `/backend/locations/`
}

export const locationsCreate = async (locationRequest: LocationRequest, options?: RequestInit): Promise<locationsCreateResponse> => {
  
  const res = await fetch(getLocationsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      locationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsCreateResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsRetrieveResponse200 = {
  data: Location
  status: 200
}
    
export type locationsRetrieveResponseComposite = locationsRetrieveResponse200;
    
export type locationsRetrieveResponse = locationsRetrieveResponseComposite & {
  headers: Headers;
}

export const getLocationsRetrieveUrl = (id: string,) => {


  

  return `/backend/locations/${id}/`
}

export const locationsRetrieve = async (id: string, options?: RequestInit): Promise<locationsRetrieveResponse> => {
  
  const res = await fetch(getLocationsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsRetrieveResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsUpdateResponse200 = {
  data: Location
  status: 200
}
    
export type locationsUpdateResponseComposite = locationsUpdateResponse200;
    
export type locationsUpdateResponse = locationsUpdateResponseComposite & {
  headers: Headers;
}

export const getLocationsUpdateUrl = (id: string,) => {


  

  return `/backend/locations/${id}/`
}

export const locationsUpdate = async (id: string,
    locationRequest: LocationRequest, options?: RequestInit): Promise<locationsUpdateResponse> => {
  
  const res = await fetch(getLocationsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      locationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsUpdateResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsPartialUpdateResponse200 = {
  data: Location
  status: 200
}
    
export type locationsPartialUpdateResponseComposite = locationsPartialUpdateResponse200;
    
export type locationsPartialUpdateResponse = locationsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getLocationsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/locations/${id}/`
}

export const locationsPartialUpdate = async (id: string,
    patchedLocationRequest: PatchedLocationRequest, options?: RequestInit): Promise<locationsPartialUpdateResponse> => {
  
  const res = await fetch(getLocationsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedLocationRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsPartialUpdateResponse
}



/**
 * API endpoint that allows locations to be viewed or edited.
 */
export type locationsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type locationsDestroyResponseComposite = locationsDestroyResponse204;
    
export type locationsDestroyResponse = locationsDestroyResponseComposite & {
  headers: Headers;
}

export const getLocationsDestroyUrl = (id: string,) => {


  

  return `/backend/locations/${id}/`
}

export const locationsDestroy = async (id: string, options?: RequestInit): Promise<locationsDestroyResponse> => {
  
  const res = await fetch(getLocationsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationsDestroyResponse
}



/**
 * API endpoint for getting detailed information about an authenticated user.
 */
export type meRetrieveResponse200 = {
  data: void
  status: 200
}
    
export type meRetrieveResponseComposite = meRetrieveResponse200;
    
export type meRetrieveResponse = meRetrieveResponseComposite & {
  headers: Headers;
}

export const getMeRetrieveUrl = () => {


  

  return `/backend/me/`
}

export const meRetrieve = async ( options?: RequestInit): Promise<meRetrieveResponse> => {
  
  const res = await fetch(getMeRetrieveUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: meRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as meRetrieveResponse
}



/**
 * API endpoint for getting detailed information about an authenticated user.
 */
export type mePartialUpdateResponse200 = {
  data: void
  status: 200
}
    
export type mePartialUpdateResponseComposite = mePartialUpdateResponse200;
    
export type mePartialUpdateResponse = mePartialUpdateResponseComposite & {
  headers: Headers;
}

export const getMePartialUpdateUrl = () => {


  

  return `/backend/me/`
}

export const mePartialUpdate = async ( options?: RequestInit): Promise<mePartialUpdateResponse> => {
  
  const res = await fetch(getMePartialUpdateUrl(),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mePartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mePartialUpdateResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsListResponse200 = {
  data: MentorHelpRequestRead[]
  status: 200
}
    
export type mentorhelprequestsListResponseComposite = mentorhelprequestsListResponse200;
    
export type mentorhelprequestsListResponse = mentorhelprequestsListResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsListUrl = (params?: MentorhelprequestsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/mentorhelprequests/?${stringifiedParams}` : `/backend/mentorhelprequests/`
}

export const mentorhelprequestsList = async (params?: MentorhelprequestsListParams, options?: RequestInit): Promise<mentorhelprequestsListResponse> => {
  
  const res = await fetch(getMentorhelprequestsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsListResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsCreateResponse201 = {
  data: MentorHelpRequest
  status: 201
}
    
export type mentorhelprequestsCreateResponseComposite = mentorhelprequestsCreateResponse201;
    
export type mentorhelprequestsCreateResponse = mentorhelprequestsCreateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsCreateUrl = () => {


  

  return `/backend/mentorhelprequests/`
}

export const mentorhelprequestsCreate = async (mentorHelpRequestRequest: MentorHelpRequestRequest, options?: RequestInit): Promise<mentorhelprequestsCreateResponse> => {
  
  const res = await fetch(getMentorhelprequestsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      mentorHelpRequestRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsCreateResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsRetrieveResponse200 = {
  data: MentorHelpRequest
  status: 200
}
    
export type mentorhelprequestsRetrieveResponseComposite = mentorhelprequestsRetrieveResponse200;
    
export type mentorhelprequestsRetrieveResponse = mentorhelprequestsRetrieveResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsRetrieveUrl = (id: string,) => {


  

  return `/backend/mentorhelprequests/${id}/`
}

export const mentorhelprequestsRetrieve = async (id: string, options?: RequestInit): Promise<mentorhelprequestsRetrieveResponse> => {
  
  const res = await fetch(getMentorhelprequestsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsRetrieveResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsUpdateResponse200 = {
  data: MentorHelpRequest
  status: 200
}
    
export type mentorhelprequestsUpdateResponseComposite = mentorhelprequestsUpdateResponse200;
    
export type mentorhelprequestsUpdateResponse = mentorhelprequestsUpdateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsUpdateUrl = (id: string,) => {


  

  return `/backend/mentorhelprequests/${id}/`
}

export const mentorhelprequestsUpdate = async (id: string,
    mentorHelpRequestRequest: MentorHelpRequestRequest, options?: RequestInit): Promise<mentorhelprequestsUpdateResponse> => {
  
  const res = await fetch(getMentorhelprequestsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      mentorHelpRequestRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsUpdateResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsPartialUpdateResponse200 = {
  data: MentorHelpRequest
  status: 200
}
    
export type mentorhelprequestsPartialUpdateResponseComposite = mentorhelprequestsPartialUpdateResponse200;
    
export type mentorhelprequestsPartialUpdateResponse = mentorhelprequestsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/mentorhelprequests/${id}/`
}

export const mentorhelprequestsPartialUpdate = async (id: string,
    patchedMentorHelpRequestRequest: PatchedMentorHelpRequestRequest, options?: RequestInit): Promise<mentorhelprequestsPartialUpdateResponse> => {
  
  const res = await fetch(getMentorhelprequestsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedMentorHelpRequestRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsPartialUpdateResponse
}



/**
 * API endpoint that allows mentor help requests to be viewed or edited.
 */
export type mentorhelprequestsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type mentorhelprequestsDestroyResponseComposite = mentorhelprequestsDestroyResponse204;
    
export type mentorhelprequestsDestroyResponse = mentorhelprequestsDestroyResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestsDestroyUrl = (id: string,) => {


  

  return `/backend/mentorhelprequests/${id}/`
}

export const mentorhelprequestsDestroy = async (id: string, options?: RequestInit): Promise<mentorhelprequestsDestroyResponse> => {
  
  const res = await fetch(getMentorhelprequestsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestsDestroyResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryListResponse200 = {
  data: MentorHelpRequestHistory[]
  status: 200
}
    
export type mentorhelprequestshistoryListResponseComposite = mentorhelprequestshistoryListResponse200;
    
export type mentorhelprequestshistoryListResponse = mentorhelprequestshistoryListResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryListUrl = (params?: MentorhelprequestshistoryListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/mentorhelprequestshistory/?${stringifiedParams}` : `/backend/mentorhelprequestshistory/`
}

export const mentorhelprequestshistoryList = async (params?: MentorhelprequestshistoryListParams, options?: RequestInit): Promise<mentorhelprequestshistoryListResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryListResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryCreateResponse201 = {
  data: MentorHelpRequestHistory
  status: 201
}
    
export type mentorhelprequestshistoryCreateResponseComposite = mentorhelprequestshistoryCreateResponse201;
    
export type mentorhelprequestshistoryCreateResponse = mentorhelprequestshistoryCreateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryCreateUrl = () => {


  

  return `/backend/mentorhelprequestshistory/`
}

export const mentorhelprequestshistoryCreate = async (mentorHelpRequestHistoryRequest: MentorHelpRequestHistoryRequest, options?: RequestInit): Promise<mentorhelprequestshistoryCreateResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      mentorHelpRequestHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryCreateResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryRetrieveResponse200 = {
  data: MentorHelpRequestHistory
  status: 200
}
    
export type mentorhelprequestshistoryRetrieveResponseComposite = mentorhelprequestshistoryRetrieveResponse200;
    
export type mentorhelprequestshistoryRetrieveResponse = mentorhelprequestshistoryRetrieveResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryRetrieveUrl = (historyId: number,) => {


  

  return `/backend/mentorhelprequestshistory/${historyId}/`
}

export const mentorhelprequestshistoryRetrieve = async (historyId: number, options?: RequestInit): Promise<mentorhelprequestshistoryRetrieveResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryRetrieveUrl(historyId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryRetrieveResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryUpdateResponse200 = {
  data: MentorHelpRequestHistory
  status: 200
}
    
export type mentorhelprequestshistoryUpdateResponseComposite = mentorhelprequestshistoryUpdateResponse200;
    
export type mentorhelprequestshistoryUpdateResponse = mentorhelprequestshistoryUpdateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryUpdateUrl = (historyId: number,) => {


  

  return `/backend/mentorhelprequestshistory/${historyId}/`
}

export const mentorhelprequestshistoryUpdate = async (historyId: number,
    mentorHelpRequestHistoryRequest: MentorHelpRequestHistoryRequest, options?: RequestInit): Promise<mentorhelprequestshistoryUpdateResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryUpdateUrl(historyId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      mentorHelpRequestHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryUpdateResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryPartialUpdateResponse200 = {
  data: MentorHelpRequestHistory
  status: 200
}
    
export type mentorhelprequestshistoryPartialUpdateResponseComposite = mentorhelprequestshistoryPartialUpdateResponse200;
    
export type mentorhelprequestshistoryPartialUpdateResponse = mentorhelprequestshistoryPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryPartialUpdateUrl = (historyId: number,) => {


  

  return `/backend/mentorhelprequestshistory/${historyId}/`
}

export const mentorhelprequestshistoryPartialUpdate = async (historyId: number,
    patchedMentorHelpRequestHistoryRequest: PatchedMentorHelpRequestHistoryRequest, options?: RequestInit): Promise<mentorhelprequestshistoryPartialUpdateResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryPartialUpdateUrl(historyId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedMentorHelpRequestHistoryRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryPartialUpdateResponse
}



/**
 * API endpoint that allows mentor help requests historical records to be viewed.
 */
export type mentorhelprequestshistoryDestroyResponse204 = {
  data: void
  status: 204
}
    
export type mentorhelprequestshistoryDestroyResponseComposite = mentorhelprequestshistoryDestroyResponse204;
    
export type mentorhelprequestshistoryDestroyResponse = mentorhelprequestshistoryDestroyResponseComposite & {
  headers: Headers;
}

export const getMentorhelprequestshistoryDestroyUrl = (historyId: number,) => {


  

  return `/backend/mentorhelprequestshistory/${historyId}/`
}

export const mentorhelprequestshistoryDestroy = async (historyId: number, options?: RequestInit): Promise<mentorhelprequestshistoryDestroyResponse> => {
  
  const res = await fetch(getMentorhelprequestshistoryDestroyUrl(historyId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: mentorhelprequestshistoryDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as mentorhelprequestshistoryDestroyResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsListResponse200 = {
  data: Project[]
  status: 200
}
    
export type projectsListResponseComposite = projectsListResponse200;
    
export type projectsListResponse = projectsListResponseComposite & {
  headers: Headers;
}

export const getProjectsListUrl = (params?: ProjectsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/projects/?${stringifiedParams}` : `/backend/projects/`
}

export const projectsList = async (params?: ProjectsListParams, options?: RequestInit): Promise<projectsListResponse> => {
  
  const res = await fetch(getProjectsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsListResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsCreateResponse201 = {
  data: Project
  status: 201
}
    
export type projectsCreateResponseComposite = projectsCreateResponse201;
    
export type projectsCreateResponse = projectsCreateResponseComposite & {
  headers: Headers;
}

export const getProjectsCreateUrl = () => {


  

  return `/backend/projects/`
}

export const projectsCreate = async (projectRequest: ProjectRequest, options?: RequestInit): Promise<projectsCreateResponse> => {
  
  const res = await fetch(getProjectsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsCreateResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsRetrieveResponse200 = {
  data: Project
  status: 200
}
    
export type projectsRetrieveResponseComposite = projectsRetrieveResponse200;
    
export type projectsRetrieveResponse = projectsRetrieveResponseComposite & {
  headers: Headers;
}

export const getProjectsRetrieveUrl = (id: string,) => {


  

  return `/backend/projects/${id}/`
}

export const projectsRetrieve = async (id: string, options?: RequestInit): Promise<projectsRetrieveResponse> => {
  
  const res = await fetch(getProjectsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsRetrieveResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsUpdateResponse200 = {
  data: Project
  status: 200
}
    
export type projectsUpdateResponseComposite = projectsUpdateResponse200;
    
export type projectsUpdateResponse = projectsUpdateResponseComposite & {
  headers: Headers;
}

export const getProjectsUpdateUrl = (id: string,) => {


  

  return `/backend/projects/${id}/`
}

export const projectsUpdate = async (id: string,
    projectRequest: ProjectRequest, options?: RequestInit): Promise<projectsUpdateResponse> => {
  
  const res = await fetch(getProjectsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsUpdateResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsPartialUpdateResponse200 = {
  data: Project
  status: 200
}
    
export type projectsPartialUpdateResponseComposite = projectsPartialUpdateResponse200;
    
export type projectsPartialUpdateResponse = projectsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getProjectsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/projects/${id}/`
}

export const projectsPartialUpdate = async (id: string,
    patchedProjectRequest: PatchedProjectRequest, options?: RequestInit): Promise<projectsPartialUpdateResponse> => {
  
  const res = await fetch(getProjectsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedProjectRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsPartialUpdateResponse
}



/**
 * API endpoint that allows projects to be viewed or edited.
 */
export type projectsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type projectsDestroyResponseComposite = projectsDestroyResponse204;
    
export type projectsDestroyResponse = projectsDestroyResponseComposite & {
  headers: Headers;
}

export const getProjectsDestroyUrl = (id: string,) => {


  

  return `/backend/projects/${id}/`
}

export const projectsDestroy = async (id: string, options?: RequestInit): Promise<projectsDestroyResponse> => {
  
  const res = await fetch(getProjectsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: projectsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as projectsDestroyResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsListResponse200 = {
  data: AttendeeRSVP[]
  status: 200
}
    
export type rsvpsListResponseComposite = rsvpsListResponse200;
    
export type rsvpsListResponse = rsvpsListResponseComposite & {
  headers: Headers;
}

export const getRsvpsListUrl = (params?: RsvpsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/rsvps/?${stringifiedParams}` : `/backend/rsvps/`
}

export const rsvpsList = async (params?: RsvpsListParams, options?: RequestInit): Promise<rsvpsListResponse> => {
  
  const res = await fetch(getRsvpsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsListResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsCreateResponse201 = {
  data: AttendeeRSVPCreate
  status: 201
}
    
export type rsvpsCreateResponseComposite = rsvpsCreateResponse201;
    
export type rsvpsCreateResponse = rsvpsCreateResponseComposite & {
  headers: Headers;
}

export const getRsvpsCreateUrl = () => {


  

  return `/backend/rsvps/`
}

export const rsvpsCreate = async (attendeeRSVPCreateRequest: AttendeeRSVPCreateRequest, options?: RequestInit): Promise<rsvpsCreateResponse> => {
  
  const res = await fetch(getRsvpsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeeRSVPCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsCreateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsRetrieveResponse200 = {
  data: AttendeeRSVP
  status: 200
}
    
export type rsvpsRetrieveResponseComposite = rsvpsRetrieveResponse200;
    
export type rsvpsRetrieveResponse = rsvpsRetrieveResponseComposite & {
  headers: Headers;
}

export const getRsvpsRetrieveUrl = (id: string,) => {


  

  return `/backend/rsvps/${id}/`
}

export const rsvpsRetrieve = async (id: string, options?: RequestInit): Promise<rsvpsRetrieveResponse> => {
  
  const res = await fetch(getRsvpsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsRetrieveResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsUpdateResponse200 = {
  data: AttendeeRSVP
  status: 200
}
    
export type rsvpsUpdateResponseComposite = rsvpsUpdateResponse200;
    
export type rsvpsUpdateResponse = rsvpsUpdateResponseComposite & {
  headers: Headers;
}

export const getRsvpsUpdateUrl = (id: string,) => {


  

  return `/backend/rsvps/${id}/`
}

export const rsvpsUpdate = async (id: string,
    attendeeRSVPRequest: AttendeeRSVPRequest, options?: RequestInit): Promise<rsvpsUpdateResponse> => {
  
  const res = await fetch(getRsvpsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attendeeRSVPRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsUpdateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsPartialUpdateResponse200 = {
  data: AttendeeRSVP
  status: 200
}
    
export type rsvpsPartialUpdateResponseComposite = rsvpsPartialUpdateResponse200;
    
export type rsvpsPartialUpdateResponse = rsvpsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getRsvpsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/rsvps/${id}/`
}

export const rsvpsPartialUpdate = async (id: string,
    patchedAttendeeRSVPRequest: PatchedAttendeeRSVPRequest, options?: RequestInit): Promise<rsvpsPartialUpdateResponse> => {
  
  const res = await fetch(getRsvpsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedAttendeeRSVPRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsPartialUpdateResponse
}



/**
 * API endpoint that allows users to be viewed or edited.
 */
export type rsvpsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type rsvpsDestroyResponseComposite = rsvpsDestroyResponse204;
    
export type rsvpsDestroyResponse = rsvpsDestroyResponseComposite & {
  headers: Headers;
}

export const getRsvpsDestroyUrl = (id: string,) => {


  

  return `/backend/rsvps/${id}/`
}

export const rsvpsDestroy = async (id: string, options?: RequestInit): Promise<rsvpsDestroyResponse> => {
  
  const res = await fetch(getRsvpsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rsvpsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as rsvpsDestroyResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesListResponse200 = {
  data: SkillProficiency[]
  status: 200
}
    
export type skillproficienciesListResponseComposite = skillproficienciesListResponse200;
    
export type skillproficienciesListResponse = skillproficienciesListResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesListUrl = (params?: SkillproficienciesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/skillproficiencies/?${stringifiedParams}` : `/backend/skillproficiencies/`
}

export const skillproficienciesList = async (params?: SkillproficienciesListParams, options?: RequestInit): Promise<skillproficienciesListResponse> => {
  
  const res = await fetch(getSkillproficienciesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesListResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesCreateResponse201 = {
  data: SkillProficiencyCreate
  status: 201
}
    
export type skillproficienciesCreateResponseComposite = skillproficienciesCreateResponse201;
    
export type skillproficienciesCreateResponse = skillproficienciesCreateResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesCreateUrl = () => {


  

  return `/backend/skillproficiencies/`
}

export const skillproficienciesCreate = async (skillProficiencyCreateRequest: SkillProficiencyCreateRequest, options?: RequestInit): Promise<skillproficienciesCreateResponse> => {
  
  const res = await fetch(getSkillproficienciesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      skillProficiencyCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesCreateResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesRetrieveResponse200 = {
  data: SkillProficiencyDetail
  status: 200
}
    
export type skillproficienciesRetrieveResponseComposite = skillproficienciesRetrieveResponse200;
    
export type skillproficienciesRetrieveResponse = skillproficienciesRetrieveResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesRetrieveUrl = (id: string,) => {


  

  return `/backend/skillproficiencies/${id}/`
}

export const skillproficienciesRetrieve = async (id: string, options?: RequestInit): Promise<skillproficienciesRetrieveResponse> => {
  
  const res = await fetch(getSkillproficienciesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesRetrieveResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesUpdateResponse200 = {
  data: SkillProficiency
  status: 200
}
    
export type skillproficienciesUpdateResponseComposite = skillproficienciesUpdateResponse200;
    
export type skillproficienciesUpdateResponse = skillproficienciesUpdateResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesUpdateUrl = (id: string,) => {


  

  return `/backend/skillproficiencies/${id}/`
}

export const skillproficienciesUpdate = async (id: string,
    skillProficiencyRequest: SkillProficiencyRequest, options?: RequestInit): Promise<skillproficienciesUpdateResponse> => {
  
  const res = await fetch(getSkillproficienciesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      skillProficiencyRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesUpdateResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesPartialUpdateResponse200 = {
  data: SkillProficiencyCreate
  status: 200
}
    
export type skillproficienciesPartialUpdateResponseComposite = skillproficienciesPartialUpdateResponse200;
    
export type skillproficienciesPartialUpdateResponse = skillproficienciesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/skillproficiencies/${id}/`
}

export const skillproficienciesPartialUpdate = async (id: string,
    patchedSkillProficiencyCreateRequest: PatchedSkillProficiencyCreateRequest, options?: RequestInit): Promise<skillproficienciesPartialUpdateResponse> => {
  
  const res = await fetch(getSkillproficienciesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedSkillProficiencyCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesPartialUpdateResponse
}



/**
 * API endpoint that allows skill proficiencies to be viewed or edited.
 */
export type skillproficienciesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type skillproficienciesDestroyResponseComposite = skillproficienciesDestroyResponse204;
    
export type skillproficienciesDestroyResponse = skillproficienciesDestroyResponseComposite & {
  headers: Headers;
}

export const getSkillproficienciesDestroyUrl = (id: string,) => {


  

  return `/backend/skillproficiencies/${id}/`
}

export const skillproficienciesDestroy = async (id: string, options?: RequestInit): Promise<skillproficienciesDestroyResponse> => {
  
  const res = await fetch(getSkillproficienciesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillproficienciesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillproficienciesDestroyResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsListResponse200 = {
  data: Skill[]
  status: 200
}
    
export type skillsListResponseComposite = skillsListResponse200;
    
export type skillsListResponse = skillsListResponseComposite & {
  headers: Headers;
}

export const getSkillsListUrl = (params?: SkillsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/skills/?${stringifiedParams}` : `/backend/skills/`
}

export const skillsList = async (params?: SkillsListParams, options?: RequestInit): Promise<skillsListResponse> => {
  
  const res = await fetch(getSkillsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsListResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsCreateResponse201 = {
  data: Skill
  status: 201
}
    
export type skillsCreateResponseComposite = skillsCreateResponse201;
    
export type skillsCreateResponse = skillsCreateResponseComposite & {
  headers: Headers;
}

export const getSkillsCreateUrl = () => {


  

  return `/backend/skills/`
}

export const skillsCreate = async (skillRequest: SkillRequest, options?: RequestInit): Promise<skillsCreateResponse> => {
  
  const res = await fetch(getSkillsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      skillRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsCreateResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsRetrieveResponse200 = {
  data: Skill
  status: 200
}
    
export type skillsRetrieveResponseComposite = skillsRetrieveResponse200;
    
export type skillsRetrieveResponse = skillsRetrieveResponseComposite & {
  headers: Headers;
}

export const getSkillsRetrieveUrl = (id: string,) => {


  

  return `/backend/skills/${id}/`
}

export const skillsRetrieve = async (id: string, options?: RequestInit): Promise<skillsRetrieveResponse> => {
  
  const res = await fetch(getSkillsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsRetrieveResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsUpdateResponse200 = {
  data: Skill
  status: 200
}
    
export type skillsUpdateResponseComposite = skillsUpdateResponse200;
    
export type skillsUpdateResponse = skillsUpdateResponseComposite & {
  headers: Headers;
}

export const getSkillsUpdateUrl = (id: string,) => {


  

  return `/backend/skills/${id}/`
}

export const skillsUpdate = async (id: string,
    skillRequest: SkillRequest, options?: RequestInit): Promise<skillsUpdateResponse> => {
  
  const res = await fetch(getSkillsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      skillRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsUpdateResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsPartialUpdateResponse200 = {
  data: Skill
  status: 200
}
    
export type skillsPartialUpdateResponseComposite = skillsPartialUpdateResponse200;
    
export type skillsPartialUpdateResponse = skillsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getSkillsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/skills/${id}/`
}

export const skillsPartialUpdate = async (id: string,
    patchedSkillRequest: PatchedSkillRequest, options?: RequestInit): Promise<skillsPartialUpdateResponse> => {
  
  const res = await fetch(getSkillsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedSkillRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsPartialUpdateResponse
}



/**
 * API endpoint that allows skills to be viewed or edited.
 */
export type skillsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type skillsDestroyResponseComposite = skillsDestroyResponse204;
    
export type skillsDestroyResponse = skillsDestroyResponseComposite & {
  headers: Headers;
}

export const getSkillsDestroyUrl = (id: string,) => {


  

  return `/backend/skills/${id}/`
}

export const skillsDestroy = async (id: string, options?: RequestInit): Promise<skillsDestroyResponse> => {
  
  const res = await fetch(getSkillsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: skillsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as skillsDestroyResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesListResponse200 = {
  data: Table[]
  status: 200
}
    
export type tablesListResponseComposite = tablesListResponse200;
    
export type tablesListResponse = tablesListResponseComposite & {
  headers: Headers;
}

export const getTablesListUrl = (params?: TablesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/tables/?${stringifiedParams}` : `/backend/tables/`
}

export const tablesList = async (params?: TablesListParams, options?: RequestInit): Promise<tablesListResponse> => {
  
  const res = await fetch(getTablesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesListResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesCreateResponse201 = {
  data: TableCreate
  status: 201
}
    
export type tablesCreateResponseComposite = tablesCreateResponse201;
    
export type tablesCreateResponse = tablesCreateResponseComposite & {
  headers: Headers;
}

export const getTablesCreateUrl = () => {


  

  return `/backend/tables/`
}

export const tablesCreate = async (tableCreateRequest: TableCreateRequest, options?: RequestInit): Promise<tablesCreateResponse> => {
  
  const res = await fetch(getTablesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tableCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesCreateResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesRetrieveResponse200 = {
  data: Table
  status: 200
}
    
export type tablesRetrieveResponseComposite = tablesRetrieveResponse200;
    
export type tablesRetrieveResponse = tablesRetrieveResponseComposite & {
  headers: Headers;
}

export const getTablesRetrieveUrl = (id: string,) => {


  

  return `/backend/tables/${id}/`
}

export const tablesRetrieve = async (id: string, options?: RequestInit): Promise<tablesRetrieveResponse> => {
  
  const res = await fetch(getTablesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesRetrieveResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesUpdateResponse200 = {
  data: Table
  status: 200
}
    
export type tablesUpdateResponseComposite = tablesUpdateResponse200;
    
export type tablesUpdateResponse = tablesUpdateResponseComposite & {
  headers: Headers;
}

export const getTablesUpdateUrl = (id: string,) => {


  

  return `/backend/tables/${id}/`
}

export const tablesUpdate = async (id: string,
    tableRequest: TableRequest, options?: RequestInit): Promise<tablesUpdateResponse> => {
  
  const res = await fetch(getTablesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tableRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesUpdateResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesPartialUpdateResponse200 = {
  data: Table
  status: 200
}
    
export type tablesPartialUpdateResponseComposite = tablesPartialUpdateResponse200;
    
export type tablesPartialUpdateResponse = tablesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getTablesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/tables/${id}/`
}

export const tablesPartialUpdate = async (id: string,
    patchedTableRequest: PatchedTableRequest, options?: RequestInit): Promise<tablesPartialUpdateResponse> => {
  
  const res = await fetch(getTablesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedTableRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesPartialUpdateResponse
}



/**
 * API endpoint that allows tables to be viewed or edited.
 */
export type tablesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type tablesDestroyResponseComposite = tablesDestroyResponse204;
    
export type tablesDestroyResponse = tablesDestroyResponseComposite & {
  headers: Headers;
}

export const getTablesDestroyUrl = (id: string,) => {


  

  return `/backend/tables/${id}/`
}

export const tablesDestroy = async (id: string, options?: RequestInit): Promise<tablesDestroyResponse> => {
  
  const res = await fetch(getTablesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tablesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tablesDestroyResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsListResponse200 = {
  data: Team[]
  status: 200
}
    
export type teamsListResponseComposite = teamsListResponse200;
    
export type teamsListResponse = teamsListResponseComposite & {
  headers: Headers;
}

export const getTeamsListUrl = (params?: TeamsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["attendees"];

    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/teams/?${stringifiedParams}` : `/backend/teams/`
}

export const teamsList = async (params?: TeamsListParams, options?: RequestInit): Promise<teamsListResponse> => {
  
  const res = await fetch(getTeamsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsListResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsCreateResponse201 = {
  data: TeamCreate
  status: 201
}
    
export type teamsCreateResponseComposite = teamsCreateResponse201;
    
export type teamsCreateResponse = teamsCreateResponseComposite & {
  headers: Headers;
}

export const getTeamsCreateUrl = () => {


  

  return `/backend/teams/`
}

export const teamsCreate = async (teamCreateRequest: TeamCreateRequest, options?: RequestInit): Promise<teamsCreateResponse> => {
  
  const res = await fetch(getTeamsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      teamCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsCreateResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsRetrieveResponse200 = {
  data: TeamDetail
  status: 200
}
    
export type teamsRetrieveResponseComposite = teamsRetrieveResponse200;
    
export type teamsRetrieveResponse = teamsRetrieveResponseComposite & {
  headers: Headers;
}

export const getTeamsRetrieveUrl = (id: string,) => {


  

  return `/backend/teams/${id}/`
}

export const teamsRetrieve = async (id: string, options?: RequestInit): Promise<teamsRetrieveResponse> => {
  
  const res = await fetch(getTeamsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsRetrieveResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsUpdateResponse200 = {
  data: Team
  status: 200
}
    
export type teamsUpdateResponseComposite = teamsUpdateResponse200;
    
export type teamsUpdateResponse = teamsUpdateResponseComposite & {
  headers: Headers;
}

export const getTeamsUpdateUrl = (id: string,) => {


  

  return `/backend/teams/${id}/`
}

export const teamsUpdate = async (id: string,
    teamRequest: TeamRequest, options?: RequestInit): Promise<teamsUpdateResponse> => {
  
  const res = await fetch(getTeamsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      teamRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsUpdateResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsPartialUpdateResponse200 = {
  data: TeamUpdate
  status: 200
}
    
export type teamsPartialUpdateResponseComposite = teamsPartialUpdateResponse200;
    
export type teamsPartialUpdateResponse = teamsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getTeamsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/teams/${id}/`
}

export const teamsPartialUpdate = async (id: string,
    patchedTeamUpdateRequest: PatchedTeamUpdateRequest, options?: RequestInit): Promise<teamsPartialUpdateResponse> => {
  
  const res = await fetch(getTeamsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedTeamUpdateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsPartialUpdateResponse
}



/**
 * API endpoint that allows teams to be viewed or edited.
 */
export type teamsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type teamsDestroyResponseComposite = teamsDestroyResponse204;
    
export type teamsDestroyResponse = teamsDestroyResponseComposite & {
  headers: Headers;
}

export const getTeamsDestroyUrl = (id: string,) => {


  

  return `/backend/teams/${id}/`
}

export const teamsDestroy = async (id: string, options?: RequestInit): Promise<teamsDestroyResponse> => {
  
  const res = await fetch(getTeamsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: teamsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as teamsDestroyResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesListResponse200 = {
  data: FileUpload[]
  status: 200
}
    
export type uploadedFilesListResponseComposite = uploadedFilesListResponse200;
    
export type uploadedFilesListResponse = uploadedFilesListResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesListUrl = (params?: UploadedFilesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/uploaded_files/?${stringifiedParams}` : `/backend/uploaded_files/`
}

export const uploadedFilesList = async (params?: UploadedFilesListParams, options?: RequestInit): Promise<uploadedFilesListResponse> => {
  
  const res = await fetch(getUploadedFilesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesListResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesCreateResponse201 = {
  data: FileUpload
  status: 201
}
    
export type uploadedFilesCreateResponseComposite = uploadedFilesCreateResponse201;
    
export type uploadedFilesCreateResponse = uploadedFilesCreateResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesCreateUrl = () => {


  

  return `/backend/uploaded_files/`
}

export const uploadedFilesCreate = async (fileUploadRequest: FileUploadRequest, options?: RequestInit): Promise<uploadedFilesCreateResponse> => {
  
  const res = await fetch(getUploadedFilesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      fileUploadRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesCreateResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesRetrieveResponse200 = {
  data: FileUpload
  status: 200
}
    
export type uploadedFilesRetrieveResponseComposite = uploadedFilesRetrieveResponse200;
    
export type uploadedFilesRetrieveResponse = uploadedFilesRetrieveResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesRetrieveUrl = (id: string,) => {


  

  return `/backend/uploaded_files/${id}/`
}

export const uploadedFilesRetrieve = async (id: string, options?: RequestInit): Promise<uploadedFilesRetrieveResponse> => {
  
  const res = await fetch(getUploadedFilesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesRetrieveResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesUpdateResponse200 = {
  data: FileUpload
  status: 200
}
    
export type uploadedFilesUpdateResponseComposite = uploadedFilesUpdateResponse200;
    
export type uploadedFilesUpdateResponse = uploadedFilesUpdateResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesUpdateUrl = (id: string,) => {


  

  return `/backend/uploaded_files/${id}/`
}

export const uploadedFilesUpdate = async (id: string,
    fileUploadRequest: FileUploadRequest, options?: RequestInit): Promise<uploadedFilesUpdateResponse> => {
  
  const res = await fetch(getUploadedFilesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      fileUploadRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesUpdateResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesPartialUpdateResponse200 = {
  data: FileUpload
  status: 200
}
    
export type uploadedFilesPartialUpdateResponseComposite = uploadedFilesPartialUpdateResponse200;
    
export type uploadedFilesPartialUpdateResponse = uploadedFilesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/uploaded_files/${id}/`
}

export const uploadedFilesPartialUpdate = async (id: string,
    patchedFileUploadRequest: PatchedFileUploadRequest, options?: RequestInit): Promise<uploadedFilesPartialUpdateResponse> => {
  
  const res = await fetch(getUploadedFilesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedFileUploadRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesPartialUpdateResponse
}



/**
 * API endpoint that allows files to be viewed or edited.
 */
export type uploadedFilesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type uploadedFilesDestroyResponseComposite = uploadedFilesDestroyResponse204;
    
export type uploadedFilesDestroyResponse = uploadedFilesDestroyResponseComposite & {
  headers: Headers;
}

export const getUploadedFilesDestroyUrl = (id: string,) => {


  

  return `/backend/uploaded_files/${id}/`
}

export const uploadedFilesDestroy = async (id: string, options?: RequestInit): Promise<uploadedFilesDestroyResponse> => {
  
  const res = await fetch(getUploadedFilesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadedFilesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadedFilesDestroyResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesListResponse200 = {
  data: WorkshopAttendee[]
  status: 200
}
    
export type workshopattendeesListResponseComposite = workshopattendeesListResponse200;
    
export type workshopattendeesListResponse = workshopattendeesListResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesListUrl = (params?: WorkshopattendeesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/workshopattendees/?${stringifiedParams}` : `/backend/workshopattendees/`
}

export const workshopattendeesList = async (params?: WorkshopattendeesListParams, options?: RequestInit): Promise<workshopattendeesListResponse> => {
  
  const res = await fetch(getWorkshopattendeesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesListResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesCreateResponse201 = {
  data: WorkshopAttendee
  status: 201
}
    
export type workshopattendeesCreateResponseComposite = workshopattendeesCreateResponse201;
    
export type workshopattendeesCreateResponse = workshopattendeesCreateResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesCreateUrl = () => {


  

  return `/backend/workshopattendees/`
}

export const workshopattendeesCreate = async (workshopAttendeeRequest: WorkshopAttendeeRequest, options?: RequestInit): Promise<workshopattendeesCreateResponse> => {
  
  const res = await fetch(getWorkshopattendeesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workshopAttendeeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesCreateResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesRetrieveResponse200 = {
  data: WorkshopAttendee
  status: 200
}
    
export type workshopattendeesRetrieveResponseComposite = workshopattendeesRetrieveResponse200;
    
export type workshopattendeesRetrieveResponse = workshopattendeesRetrieveResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesRetrieveUrl = (id: string,) => {


  

  return `/backend/workshopattendees/${id}/`
}

export const workshopattendeesRetrieve = async (id: string, options?: RequestInit): Promise<workshopattendeesRetrieveResponse> => {
  
  const res = await fetch(getWorkshopattendeesRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesRetrieveResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesUpdateResponse200 = {
  data: WorkshopAttendee
  status: 200
}
    
export type workshopattendeesUpdateResponseComposite = workshopattendeesUpdateResponse200;
    
export type workshopattendeesUpdateResponse = workshopattendeesUpdateResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesUpdateUrl = (id: string,) => {


  

  return `/backend/workshopattendees/${id}/`
}

export const workshopattendeesUpdate = async (id: string,
    workshopAttendeeRequest: WorkshopAttendeeRequest, options?: RequestInit): Promise<workshopattendeesUpdateResponse> => {
  
  const res = await fetch(getWorkshopattendeesUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workshopAttendeeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesUpdateResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesPartialUpdateResponse200 = {
  data: WorkshopAttendee
  status: 200
}
    
export type workshopattendeesPartialUpdateResponseComposite = workshopattendeesPartialUpdateResponse200;
    
export type workshopattendeesPartialUpdateResponse = workshopattendeesPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesPartialUpdateUrl = (id: string,) => {


  

  return `/backend/workshopattendees/${id}/`
}

export const workshopattendeesPartialUpdate = async (id: string,
    patchedWorkshopAttendeeRequest: PatchedWorkshopAttendeeRequest, options?: RequestInit): Promise<workshopattendeesPartialUpdateResponse> => {
  
  const res = await fetch(getWorkshopattendeesPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedWorkshopAttendeeRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesPartialUpdateResponse
}



/**
 * API endpoint that allows workshop attendees to be viewed or edited.
 */
export type workshopattendeesDestroyResponse204 = {
  data: void
  status: 204
}
    
export type workshopattendeesDestroyResponseComposite = workshopattendeesDestroyResponse204;
    
export type workshopattendeesDestroyResponse = workshopattendeesDestroyResponseComposite & {
  headers: Headers;
}

export const getWorkshopattendeesDestroyUrl = (id: string,) => {


  

  return `/backend/workshopattendees/${id}/`
}

export const workshopattendeesDestroy = async (id: string, options?: RequestInit): Promise<workshopattendeesDestroyResponse> => {
  
  const res = await fetch(getWorkshopattendeesDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopattendeesDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopattendeesDestroyResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsListResponse200 = {
  data: Workshop[]
  status: 200
}
    
export type workshopsListResponseComposite = workshopsListResponse200;
    
export type workshopsListResponse = workshopsListResponseComposite & {
  headers: Headers;
}

export const getWorkshopsListUrl = (params?: WorkshopsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["hardware"];

    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/backend/workshops/?${stringifiedParams}` : `/backend/workshops/`
}

export const workshopsList = async (params?: WorkshopsListParams, options?: RequestInit): Promise<workshopsListResponse> => {
  
  const res = await fetch(getWorkshopsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsListResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsCreateResponse201 = {
  data: Workshop
  status: 201
}
    
export type workshopsCreateResponseComposite = workshopsCreateResponse201;
    
export type workshopsCreateResponse = workshopsCreateResponseComposite & {
  headers: Headers;
}

export const getWorkshopsCreateUrl = () => {


  

  return `/backend/workshops/`
}

export const workshopsCreate = async (workshopRequest: WorkshopRequest, options?: RequestInit): Promise<workshopsCreateResponse> => {
  
  const res = await fetch(getWorkshopsCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workshopRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsCreateResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsRetrieveResponse200 = {
  data: Workshop
  status: 200
}
    
export type workshopsRetrieveResponseComposite = workshopsRetrieveResponse200;
    
export type workshopsRetrieveResponse = workshopsRetrieveResponseComposite & {
  headers: Headers;
}

export const getWorkshopsRetrieveUrl = (id: string,) => {


  

  return `/backend/workshops/${id}/`
}

export const workshopsRetrieve = async (id: string, options?: RequestInit): Promise<workshopsRetrieveResponse> => {
  
  const res = await fetch(getWorkshopsRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsRetrieveResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsUpdateResponse200 = {
  data: Workshop
  status: 200
}
    
export type workshopsUpdateResponseComposite = workshopsUpdateResponse200;
    
export type workshopsUpdateResponse = workshopsUpdateResponseComposite & {
  headers: Headers;
}

export const getWorkshopsUpdateUrl = (id: string,) => {


  

  return `/backend/workshops/${id}/`
}

export const workshopsUpdate = async (id: string,
    workshopRequest: WorkshopRequest, options?: RequestInit): Promise<workshopsUpdateResponse> => {
  
  const res = await fetch(getWorkshopsUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      workshopRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsUpdateResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsPartialUpdateResponse200 = {
  data: Workshop
  status: 200
}
    
export type workshopsPartialUpdateResponseComposite = workshopsPartialUpdateResponse200;
    
export type workshopsPartialUpdateResponse = workshopsPartialUpdateResponseComposite & {
  headers: Headers;
}

export const getWorkshopsPartialUpdateUrl = (id: string,) => {


  

  return `/backend/workshops/${id}/`
}

export const workshopsPartialUpdate = async (id: string,
    patchedWorkshopRequest: PatchedWorkshopRequest, options?: RequestInit): Promise<workshopsPartialUpdateResponse> => {
  
  const res = await fetch(getWorkshopsPartialUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchedWorkshopRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsPartialUpdateResponse
}



/**
 * API endpoint that allows workshops to be viewed ot edited.
 */
export type workshopsDestroyResponse204 = {
  data: void
  status: 204
}
    
export type workshopsDestroyResponseComposite = workshopsDestroyResponse204;
    
export type workshopsDestroyResponse = workshopsDestroyResponseComposite & {
  headers: Headers;
}

export const getWorkshopsDestroyUrl = (id: string,) => {


  

  return `/backend/workshops/${id}/`
}

export const workshopsDestroy = async (id: string, options?: RequestInit): Promise<workshopsDestroyResponse> => {
  
  const res = await fetch(getWorkshopsDestroyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: workshopsDestroyResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as workshopsDestroyResponse
}



